[{"C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\index.js":"1","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\App.js":"2","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\reportWebVitals.js":"3","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Firebase\\firebase.js":"4","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Provider\\UserProvider.jsx":"5","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\HeaderNav\\index.jsx":"6","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Trends\\index.jsx":"7","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Spinner\\index.jsx":"8","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Pages\\index.jsx":"9","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Users\\index.jsx":"10","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Schools\\index.jsx":"11","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Search\\index.jsx":"12","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Overview\\index.jsx":"13","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Materials\\index.jsx":"14","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\UserInfo\\index.jsx":"15","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\CampaignInfo\\index.jsx":"16","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Groups\\index.jsx":"17","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Gists\\index.jsx":"18","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\DepartmentUsers\\index.jsx":"19","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Campaign\\index.jsx":"20","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\SchoolRoute\\index.jsx":"21","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\NewAdmin\\index.jsx":"22","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Admin\\index.jsx":"23","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Pages\\LogIn\\index.jsx":"24","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Faculty\\index.jsx":"25","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Pages\\Dashboard\\index.jsx":"26","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Notification\\index.jsx":"27","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Pagination\\index.jsx":"28","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Peers\\index.jsx":"29","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\AllGist\\index.jsx":"30","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\PeerRequest\\index.jsx":"31","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\GistModal\\index.jsx":"32","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Business\\index.jsx":"33","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\PeerGroup\\index.jsx":"34","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\ImageModal\\index.jsx":"35","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\assest\\icons\\index.js":"36","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Base\\BaseMarkUp.jsx":"37","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Base\\Footer.jsx":"38","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Base\\Header.jsx":"39","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Base\\Navigation.jsx":"40"},{"size":519,"mtime":1622471400213,"results":"41","hashOfConfig":"42"},{"size":3680,"mtime":1622471400192,"results":"43","hashOfConfig":"42"},{"size":375,"mtime":1622471400220,"results":"44","hashOfConfig":"42"},{"size":2273,"mtime":1622471400210,"results":"45","hashOfConfig":"42"},{"size":698,"mtime":1622471400212,"results":"46","hashOfConfig":"42"},{"size":7869,"mtime":1622471400200,"results":"47","hashOfConfig":"42"},{"size":7481,"mtime":1622471400208,"results":"48","hashOfConfig":"42"},{"size":458,"mtime":1622471400207,"results":"49","hashOfConfig":"42"},{"size":13697,"mtime":1622471400203,"results":"50","hashOfConfig":"42"},{"size":7357,"mtime":1622471400209,"results":"51","hashOfConfig":"42"},{"size":14389,"mtime":1622471400207,"results":"52","hashOfConfig":"42"},{"size":7187,"mtime":1622471400207,"results":"53","hashOfConfig":"42"},{"size":28810,"mtime":1623076290404,"results":"54","hashOfConfig":"42"},{"size":14032,"mtime":1622471400201,"results":"55","hashOfConfig":"42"},{"size":9481,"mtime":1622471400208,"results":"56","hashOfConfig":"42"},{"size":9787,"mtime":1622471400197,"results":"57","hashOfConfig":"42"},{"size":12102,"mtime":1622471400199,"results":"58","hashOfConfig":"42"},{"size":34824,"mtime":1622471400199,"results":"59","hashOfConfig":"42"},{"size":5191,"mtime":1622471400197,"results":"60","hashOfConfig":"42"},{"size":9277,"mtime":1622471400196,"results":"61","hashOfConfig":"42"},{"size":10691,"mtime":1622471400206,"results":"62","hashOfConfig":"42"},{"size":5925,"mtime":1622471400201,"results":"63","hashOfConfig":"42"},{"size":3906,"mtime":1622471400194,"results":"64","hashOfConfig":"42"},{"size":3444,"mtime":1622471400212,"results":"65","hashOfConfig":"42"},{"size":7648,"mtime":1622471400197,"results":"66","hashOfConfig":"42"},{"size":728,"mtime":1622471400212,"results":"67","hashOfConfig":"42"},{"size":1550,"mtime":1622471400202,"results":"68","hashOfConfig":"42"},{"size":1280,"mtime":1622471400204,"results":"69","hashOfConfig":"42"},{"size":2454,"mtime":1622471400205,"results":"70","hashOfConfig":"42"},{"size":9403,"mtime":1622471400195,"results":"71","hashOfConfig":"42"},{"size":2209,"mtime":1622471400205,"results":"72","hashOfConfig":"42"},{"size":6895,"mtime":1622471400198,"results":"73","hashOfConfig":"42"},{"size":2405,"mtime":1622471400195,"results":"74","hashOfConfig":"42"},{"size":2410,"mtime":1622471400204,"results":"75","hashOfConfig":"42"},{"size":794,"mtime":1622471400200,"results":"76","hashOfConfig":"42"},{"size":416,"mtime":1623077513718,"results":"77","hashOfConfig":"42"},{"size":465,"mtime":1623076508470,"results":"78","hashOfConfig":"42"},{"size":172,"mtime":1623076508470,"results":"79","hashOfConfig":"42"},{"size":172,"mtime":1623076508471,"results":"80","hashOfConfig":"42"},{"size":328,"mtime":1623077569611,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"tvrl9j",{"filePath":"85","messages":"86","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"84"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"84"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"84"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"84"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"84"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"84"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"84"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"84"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":43,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":3,"source":"119","usedDeprecatedRules":"84"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"84"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"84"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"84"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"84"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"84"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"84"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"84"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"84"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"84"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"84"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"84"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"84"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"84"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"84"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"84"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"84"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"84"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"84"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\index.js",[],["190","191"],"C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\App.js",["192","193","194","195","196","197","198"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport './App.css';\r\n\r\nimport { UserContext } from \"./Provider/UserProvider\"\r\n\r\nimport fire from \"../src/Firebase/firebase\"\r\nimport Spinner from \"../src/Components/Spinner\"\r\nimport Dashboard from \"./Pages/Dashboard\"\r\nimport Login from \"./Pages/LogIn\"\r\nimport HeaderNav from \"./Components/HeaderNav\"\r\nimport Overview from \"./Components/Overview\"\r\nimport Users from \"./Components/Users\";\r\nimport Pages from \"./Components/Pages\"\r\nimport Materials from \"./Components/Materials\"\r\nimport Group from \"./Components/Groups\";\r\nimport Trends from \"./Components/Trends\"\r\nimport Schools from \"./Components/Schools\"\r\nimport Gists from \"./Components/Gists\";\r\nimport Campaign from \"./Components/Campaign\";\r\nimport UserInfo from \"./Components/UserInfo\";\r\nimport Search from \"./Components/Search\"\r\nimport SchoolRoute from \"./Components/SchoolRoute\"\r\nimport CampaignInfo from \"./Components/CampaignInfo\"\r\nimport NewAdmin from \"./Components/NewAdmin\"\r\nimport DepartmentUsers from \"./Components/DepartmentUsers\"\r\nimport \"./proxima_ssv//Proxima Nova Alt Bold.otf\"\r\nimport \"./proxima_ssv//Proxima Nova Alt Light.otf\"\r\nimport \"./proxima_ssv//Proxima Nova Alt Thin.otf\"\r\nimport \"./proxima_ssv//Proxima Nova Black.otf\"\r\nimport \"./proxima_ssv//Proxima Nova Bold.otf\"\r\nimport \"./proxima_ssv//Proxima Nova Extrabold.otf\"\r\nimport \"./proxima_ssv//Proxima Nova Thin.otf\"\r\nimport \"./proxima_ssv//ProximaNova-Regular.otf\"\r\n\r\n\r\n\r\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\"\r\n\r\n\r\nimport { auth } from \"./Firebase/firebase\"\r\nimport Faculty from \"./Components/Faculty\";\r\nimport Admin from \"./Components/Admin\";\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  const [loaded, setLoaded] = useState(false)\r\n  const [loggedIn, setLoggedIn] = useState(false)\r\n\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged(user => {\r\n      if (!user) {\r\n        setLoaded(true)\r\n        setLoggedIn(false)\r\n      }\r\n      else {\r\n        setLoaded(true)\r\n        setLoggedIn(true)\r\n      }\r\n    })\r\n  })\r\n\r\n  if (!loaded) {\r\n    return (\r\n      <div></div>\r\n    )\r\n  }\r\n\r\n\r\n  if (!loggedIn) {\r\n    return (\r\n      <div className=\"app\">\r\n        <Router>\r\n          <Switch>\r\n            <Route path=\"/\">\r\n              <Login />\r\n            </Route>\r\n          </Switch>\r\n        </Router>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        {/* <Route exact path=\"/\"><Redirect to=\"/overview\" /></Route> */}\r\n        <Route exact path=\"/overview\" component={() => <Overview />} />\r\n        <Route exact path=\"/users\" component={() => <Users />} />\r\n        <Route exact path=\"/user/:userid\" component={UserInfo} />\r\n        <Route exact path=\"/pages\" component={Pages} />\r\n        <Route exact path=\"/materials\" component={Materials} />\r\n        <Route exact path=\"/gists\" component={Gists} />\r\n        <Route exact path=\"/schools\" component={Schools} />\r\n        <Route exact path=\"/schools/:schoolname/:faculty\" component={Faculty} />\r\n        <Route exact path=\"/schools/:schoolname/:faculty/:department\" component={DepartmentUsers} />\r\n        <Route exact path=\"/schools/:schoolname\" component={SchoolRoute} />\r\n        <Route exact path=\"/trends\" component={Trends} />\r\n        <Route exact path=\"/group\" component={Group} />\r\n        <Route exact path=\"/campaign\" component={Campaign} />\r\n        <Route exact path=\"/campaign/:campaignid\" component={CampaignInfo} />\r\n        <Route exact path=\"/search\" component={Search} />\r\n        <Route exact path=\"/admin\" component={Admin} />\r\n        <Route exact path=\"/admin/create\" component={NewAdmin} />\r\n      </Switch>\r\n    </Router>\r\n  )\r\n}\r\nexport default App;\r\n\r\n","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\reportWebVitals.js",[],"C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Firebase\\firebase.js",["199"],"\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\nimport { functions } from \"firebase\"\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBJqG4ROG2FsQlXAWvbtgOibo5PxAqGDUQ\",\r\n  authDomain: \"my-project-7307f.firebaseapp.com\",\r\n  databaseURL: \"https://my-project-7307f.firebaseio.com\",\r\n  projectId: \"my-project-7307f\",\r\n  storageBucket: \"my-project-7307f.appspot.com\",\r\n  messagingSenderId: \"712367246617\",\r\n  appId: \"1:712367246617:web:02e1571f7b95835f608988\"\r\n};\r\n\r\n// Initialize Firebase\r\nvar fire = firebase.initializeApp(firebaseConfig);\r\n\r\nexport var storage = firebase.storage();\r\n\r\nconst messaging = firebase.messaging();\r\n\r\nexport const tokens = []\r\n\r\nNotification.requestPermission()\r\n.then(permission => {\r\n   if (permission === \"granted\"){\r\n     messaging.getToken().then(token => {\r\n       tokens.push(token)\r\n     })\r\n   } else {\r\n     console.log(\"permission denied\")\r\n   }\r\n  })\r\n.catch((err) => console.log(err))\r\n\r\n\r\nmessaging.onMessage(payload => {\r\n  console.log(\"on message\", payload)\r\n})\r\n\r\nexport default fire;\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\nexport const secondAuth = firebase.initializeApp(firebaseConfig, \"Secondary\");\r\n// export const functions = firebase.functions()\r\n\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nexport const signInWithGoogle = () => {\r\n  auth.signInWithPopup(provider);\r\n};\r\n\r\nexport const generateUserDocument = async (user, additionalData) => {\r\n  if (!user) return;\r\n\r\n  const userRef = firestore.doc(`users/${user.uid}`);\r\n  const snapshot = await userRef.get();\r\n\r\n  if (!snapshot.exists) {\r\n    const { email, displayName, photoURL } = user;\r\n    try {\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        photoURL,\r\n        ...additionalData\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error creating user document\", error);\r\n    }\r\n  }\r\n  return getUserDocument(user.uid);\r\n};\r\n\r\nconst getUserDocument = async uid => {\r\n  if (!uid) return null;\r\n  try {\r\n    const userDocument = await firestore.doc(`users/${uid}`).get();\r\n\r\n    return {\r\n      uid,\r\n      ...userDocument.data()\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error fetching user\", error);\r\n  }\r\n};\r\n ","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Provider\\UserProvider.jsx",[],"C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\HeaderNav\\index.jsx",["200","201","202","203","204","205","206"],"import React, { useState, useEffect } from \"react\"\r\nimport \"./header-nav.css\"\r\nimport { Nav, NavDropdown, Spinner } from \"react-bootstrap\"\r\nimport { Link } from \"react-router-dom\"\r\nimport * as FaIcons from \"react-icons/fa\"\r\nimport * as AiIcons from \"react-icons/ai\"\r\n\r\nimport fire, { auth, firestore } from \"../../Firebase/firebase\"\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst HeaderNav = (props) => {\r\n    const [sidebar, setSidebar] = useState(false)\r\n    const [user, setUser] = useState()\r\n    const [currentUser, setCurrentUser] = useState()\r\n    const [loading, setLoading] = useState(true)\r\n    const [name, setName] = useState(localStorage.getItem('name') || 'overview');\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('name', name)\r\n        setName(name)\r\n\r\n    }, [name])\r\n\r\n\r\n    useEffect(() => {\r\n        auth.onAuthStateChanged(user => {\r\n            var adminRef = firestore.collection(\"Admin\").get()\r\n                .then((querySnapshot) => {\r\n\r\n                    var adminArr = []\r\n                    querySnapshot.forEach((doc) => {\r\n                        adminArr.push(doc.data())\r\n                    });\r\n                    setCurrentUser(user)\r\n                    adminArr?.map(admin => {\r\n                        if (admin.email === user.email) {\r\n                            setUser(admin)\r\n                            \r\n                        }\r\n                    })\r\n                });\r\n\r\n        })\r\n    }, [])\r\n\r\n\r\n\r\n\r\n    const showSidebar = () => {\r\n        setSidebar(!sidebar)\r\n    }\r\n\r\n    const SignOut = async () => {\r\n        await fire.auth().signOut()\r\n    }\r\n\r\n    const handleClick = (a) => {\r\n        setName(a)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"header-nav\">\r\n                <div>\r\n                    <Link to=\"#\" className=\"menu-bars\">\r\n                        <FaIcons.FaBars onClick={showSidebar} />\r\n                    </Link>\r\n                    <nav className={sidebar ? 'nav-menu active' : 'nav-menu'}>\r\n                        <ul className=\"nav-menu-items\" onClick={showSidebar}>\r\n                            <li className=\"navbar-toggle\">\r\n                                <Link to=\"#\" className=\"menu-bars\">\r\n                                    <AiIcons.AiOutlineClose />\r\n                                </Link>\r\n                            </li>\r\n                            <li className={window.location.pathname === \"/overview\" ? \" nav-text pactive\" : \"nav-text\"}>\r\n                                <Link to=\"/overview\" className=\"\">Overview</Link>\r\n                            </li>\r\n                            <li className={window.location.pathname === \"/users\" ? \" nav-text pactive\" : \"nav-text\"}>\r\n                                <Link to=\"/users\" className=\"\" >Users</Link>\r\n                            </li>\r\n                            <li className={window.location.pathname === \"/pages\" ? \" nav-text pactive\" : \"nav-text\"}>\r\n                                <Link to=\"/pages\" className=\"\">Pages</Link>\r\n                            </li>\r\n                            <li className={window.location.pathname === \"/gists\" ? \" nav-text pactive\" : \"nav-text\"}>\r\n                                <Link to=\"/gists\" className=\"\" >Gists</Link>\r\n                            </li>\r\n                            <li className={window.location.pathname === \"/materials\" ? \" nav-text pactive\" : \"nav-text\"}>\r\n                                <Link to=\"/materials\" className=\"\" >Materials</Link>\r\n                            </li>\r\n                            <li className={window.location.pathname === \"/campaign\" ? \" nav-text pactive\" : \"nav-text\"}>\r\n                                <Link to=\"/campaign\" className=\"\" >Campaign</Link>\r\n                            </li>\r\n                            <li className={window.location.pathname === \"group\" ? \" nav-text pactive\" : \"nav-text\"}>\r\n                                <Link to=\"/group\" className=\"\" >Group</Link>\r\n                            </li>\r\n                            <li className={window.location.pathname === \"/schools\" ? \" nav-text pactive\" : \"nav-text\"}>\r\n                                <Link to=\"/schools\" className=\"\" >Schools</Link>\r\n                            </li>\r\n                            <li className={window.location.pathname === \"/trends\" ? \" nav-text pactive\" : \"nav-text\"}>\r\n                                <Link to=\"/trends\" className=\"\" >Trends</Link>\r\n                            </li>\r\n                            <li className={window.location.pathname === \"/admin\" ? \" nav-text pactive\" : \"nav-text\"}>\r\n                                <Link to=\"/admin\" className=\"\" >Admin</Link>\r\n                            </li>\r\n                        </ul>\r\n                    </nav>\r\n                    <img src=\"https://res.cloudinary.com/doouwbecx/image/upload/v1604742745/Schoolng/cir_l_2_w59sua.png\" onClick={() => window.location.href = '/'} alt=\"\" style={{ cursor: \"pointer\" }} />\r\n                </div>\r\n\r\n                <div className=\"header-nav2\">\r\n                    <NavDropdown title=\"Admin\" id=\"basic-nav-dropdown\">\r\n                        {\r\n                            user?.type === \"super\" || currentUser?.email === \"support@schooln.ng\" ?\r\n                                (\r\n                                    <>\r\n                                    <NavDropdown.Item href=\"/admin/create\">Add New Admin</NavDropdown.Item>\r\n                                    <NavDropdown.Divider />\r\n                                    </>\r\n                                )\r\n                                : null\r\n                        }\r\n                       \r\n                        <NavDropdown.Item onClick={() => SignOut()}>LogOut</NavDropdown.Item>\r\n                    </NavDropdown>\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <div style={{ display: \"flex\", backgroundColor: '#F7F7F7', height: '100%' }}>\r\n\r\n                <div>\r\n                    <div className=\"sideNav\">\r\n                        <div className=\"sideNav-hr\">\r\n                            <div className=\"sideNav-ul\">\r\n                                <Link to=\"/overview\" className={window.location.pathname === \"/overview\" ? \" sideNav-li pactive\" : \"sideNav-li\"} >Overview</Link>\r\n                                <Link to=\"/users\" className={window.location.pathname === \"/users\" ? \" sideNav-li pactive\" : \"sideNav-li\"} >Users</Link>\r\n                                <Link to=\"/pages\" className={window.location.pathname === \"/pages\" ? \" sideNav-li pactive\" : \"sideNav-li\"} >Pages</Link>\r\n                                <Link to=\"/gists\" className={window.location.pathname === \"/gists\" ? \" sideNav-li pactive\" : \"sideNav-li\"} >Gists</Link>\r\n                                <Link to=\"/materials\" className={window.location.pathname === \"/materials\" ? \" sideNav-li pactive\" : \"sideNav-li\"} >Materials</Link>\r\n                                <Link to=\"/campaign\" className={window.location.pathname === \"/campaign\" ? \" sideNav-li pactive\" : \"sideNav-li\"} >Campaign</Link>\r\n                                <Link to=\"/group\" className={window.location.pathname === \"/group\" ? \" sideNav-li pactive\" : \"sideNav-li\"} >Group</Link>\r\n                                <Link to=\"/schools\" className={window.location.pathname === \"/schools\" ? \" sideNav-li pactive\" : \"sideNav-li\"} >Schools</Link>\r\n                                <Link to=\"/trends\" className={window.location.pathname === \"/trends\" ? \" sideNav-li pactive\" : \"sideNav-li\"} >Trends</Link>\r\n                                <Link to=\"/admin\" className={window.location.pathname === \"/admin\" ? \" sideNav-li pactive\" : \"sideNav-li\"} >Admin</Link>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HeaderNav;","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Trends\\index.jsx",["207","208","209","210","211","212","213","214"],"import React, { useState, useEffect } from \"react\"\r\nimport './trends.css'\r\n\r\n\r\nimport fire from \"../../Firebase/firebase\"\r\nimport Pagination from \"../Pagination\"\r\n\r\nimport { Container, Row, Col, Table, OverlayTrigger, Popover } from \"react-bootstrap\"\r\nimport HeaderNav from \"../HeaderNav\"\r\n\r\nconst Trends = () => {\r\n    const [trends, setTrends] = useState()\r\n    const [selectedTrend, setSelectedTrend] = useState(\"Ambrose Alli University\");\r\n    const [schools, setSchools] = useState()\r\n    const [sort, setSort] = useState()\r\n    const [searchValue, setSearchValue] = useState('')\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [postPerPage, setPostPerPage] = useState(15)\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        var schoolRef = fire.database().ref().child(\"Schools\")\r\n        schoolRef.on('value', snap => {\r\n            const school = snap.val();\r\n            const schoolList = [];\r\n            for (let m in school) {\r\n                schoolList.push(school[m]);\r\n            }\r\n            setSchools(schoolList)\r\n        })\r\n\r\n\r\n        var issueRef = fire.database().ref().child(\"School Trends\")\r\n        issueRef.on('value', snap => {\r\n            const issue = snap.val();\r\n            const issueList = [];\r\n            for (let m in issue) {\r\n                issueList.push({\r\n                    name: Object.keys(issue),\r\n                    trend: issue[m]\r\n                });\r\n            }\r\n            setTrends(issueList)\r\n        })\r\n\r\n    }, [])\r\n\r\n\r\n    const indexOfLastPost = currentPage * postPerPage;\r\n    const indexOfFirstPost = indexOfLastPost - postPerPage\r\n    const currentPosts = trends && trends\r\n\r\n\r\n\r\n    const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n\r\n\r\n    const mts = []\r\n    trends && trends.map(trend => {\r\n        return trend.name.toString() === selectedTrend ? (\r\n            trend.trend ? (mts.push(Object.entries(trend.trend).length)) : undefined\r\n        ) : undefined\r\n    })\r\n\r\n\r\n    return (\r\n        <div>\r\n            <HeaderNav />\r\n\r\n            <div className=\"app-div\">\r\n                <div className=\"trend-page\">\r\n                    <div className=\"search-div\">\r\n                        <select className=\"trend-inst\" value={selectedTrend} onChange={(e) => setSelectedTrend(e.target.value)}>\r\n                            {\r\n                                schools && schools.map(sch => {\r\n                                    return <option>\r\n                                        {sch.Profile ? sch.Profile.name : undefined}\r\n                                    </option>\r\n                                })\r\n                            }\r\n                        </select>\r\n                        <div className=\"trigger\">\r\n                            <OverlayTrigger\r\n                                trigger=\"click\"\r\n                                key={\"left\"}\r\n                                placement={\"bottom\"}\r\n                                overlay={\r\n                                    <Popover id={`popover-positioned-left`} className=\"toolspit\">\r\n                                        <Popover.Title as=\"h3\" className=\"inst-header\">Sort by</Popover.Title>\r\n                                        <Popover.Content>\r\n                                            <p className=\"sort\" onClick={() => setSort(false)}>Highest Users</p>\r\n                                            <p className=\"sort\" onClick={() => setSort(true)}>Lowest Users</p>\r\n                                        </Popover.Content>\r\n                                    </Popover>\r\n                                }\r\n                            >\r\n                                <p className=\"sort\"><img src=\"https://img.icons8.com/ios-glyphs/24/F07841/sorting-answers.png\" alt=\"\" /> Sort</p>\r\n                            </OverlayTrigger>\r\n                            <input type=\"search\" placeholder=\"Search by Trendname\" className=\"search-inp\" value={searchValue} onChange={(e) => setSearchValue(e.target.value)} />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div>\r\n                        {\r\n                            trends && trends.map(trend => {\r\n                                return trend.name.toString() === selectedTrend ? (\r\n                                    <div className=\"trend-section\">\r\n                                        <Table responsive>\r\n                                            <thead>\r\n                                                <tr>\r\n                                                    <th className=\"username\">No..</th>\r\n                                                    <th className=\"email\">Trend</th>\r\n                                                    <th className=\"school\">Gist</th>\r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                                {\r\n                                                    sort ?\r\n                                                        (\r\n                                                            trend.trend ? Object.entries(trend.trend).filter(cr => cr[0].toLowerCase().includes(searchValue.toLowerCase())).sort((a, b) => Object.values(a[1]).length - Object.values(b[1]).length).map((tr, i) => {\r\n                                                                return <tr>\r\n                                                                    <td className=\"bus-name\">{i + 1}</td>\r\n                                                                    <td className=\"bus-name\">{tr[0]}</td>\r\n                                                                    <td className=\"bus-name\">{Object.values(tr[1]).length}</td>\r\n                                                                </tr>\r\n                                                            }) : undefined\r\n                                                        )\r\n                                                        :\r\n                                                        (\r\n                                                            trend.trend ? Object.entries(trend.trend).filter(cr => cr[0].toLowerCase().includes(searchValue.toLowerCase())).sort((a, b) => Object.values(b[1]).length - Object.values(a[1]).length).map((tr, i) => {\r\n                                                                return <tr>\r\n                                                                    <td className=\"bus-name\">{i + 1}</td>\r\n                                                                    <td className=\"bus-name\">{tr[0]}</td>\r\n                                                                    <td className=\"bus-name\">{Object.values(tr[1]).length}</td>\r\n                                                                </tr>\r\n                                                            }) : undefined\r\n                                                        )\r\n                                                }\r\n                                            </tbody>\r\n                                        </Table>\r\n\r\n\r\n                                    </div>\r\n                                ) : <p style={{ textAlign: 'center' }}>No Trend for {selectedTrend}</p>\r\n\r\n                            })\r\n                        }\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Trends","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Spinner\\index.jsx",[],"C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Pages\\index.jsx",["215","216","217","218","219","220","221","222","223"],"import React, { useState, useEffect } from 'react'\r\nimport \"./Pages.css\"\r\n\r\n\r\nimport { OverlayTrigger, Popover, Table } from \"react-bootstrap\"\r\nimport Pagination from \"../Pagination\"\r\nimport Spinner from \"../Spinner\"\r\n\r\n\r\nimport fire from \"../../Firebase/firebase\"\r\nimport HeaderNav from '../HeaderNav'\r\n\r\nfunction Pages() {\r\n    const [pages, setPages] = useState();\r\n    const [users, setUsers] = useState();\r\n    const [selectedPage, setSelectedPage] = useState(\"Ambrose Alli University\");\r\n    const [schools, setSchools] = useState()\r\n    const [sort, setSort] = useState()\r\n    const [searchValue, setSearchValue] = useState('')\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [postPerPage, setPostPerPage] = useState(15)\r\n\r\n\r\n    useEffect(() => {\r\n        const fecthSch = async () => {\r\n            var schoolRef = fire.database().ref().child(\"Schools\")\r\n            schoolRef.on('value', snap => {\r\n                const school = snap.val();\r\n                const schoolList = [];\r\n                for (let m in school) {\r\n                    schoolList.push(school[m]);\r\n                }\r\n                setSchools(schoolList)\r\n            })\r\n\r\n            var userRef = await fire.database().ref().child(\"Users\")\r\n            userRef.on('value', snap => {\r\n                const user = snap.val();\r\n                const userList = [];\r\n\r\n                for (let m in user) {\r\n                    userList.push(user[m]);\r\n                }\r\n                setUsers(userList);\r\n            })\r\n\r\n        }\r\n\r\n\r\n        fecthSch()\r\n\r\n    }, [])\r\n\r\n\r\n    const indexOfLastPost = currentPage * postPerPage;\r\n    const indexOfFirstPost = indexOfLastPost - postPerPage\r\n\r\n\r\n    //work in progress\r\n    // users && users.map(user => {\r\n    //     return user.Subscribed_users ? \r\n    //     (\r\n    //         console.log(user.Subscribed_users)\r\n    //     ) : undefined\r\n    // })\r\n\r\n\r\n    const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n    const mts = []\r\n    schools && schools.map(school => {\r\n        return school.Profile.name.toString() === selectedPage ? (\r\n            school.Business ? (mts.push(school.Business.Category.General).length) : undefined\r\n        ) : undefined\r\n    })\r\n\r\n    const pt = mts[0] ? Object.values(mts[0]).length : undefined\r\n\r\n    const currentPost = schools && schools.map(sch => sch.Business ? Object.values(sch.Business.Category.General).filter(cr => cr.name.toLowerCase().includes(searchValue.toLowerCase())) : \"\")\r\n\r\n\r\n    return (\r\n        <div>\r\n            <HeaderNav />\r\n\r\n            <div className=\"app-div\">\r\n                <div className=\"trend-page\">\r\n                    <div className=\"search-div\">\r\n                        <select className=\"trend-inst\" value={selectedPage} onChange={(e) => setSelectedPage(e.target.value)}>\r\n                            {\r\n                                schools && schools.map(sch => {\r\n                                    return <option>\r\n                                        {sch.Profile ? sch.Profile.name : undefined}\r\n                                    </option>\r\n                                })\r\n                            }\r\n                        </select>\r\n                        <div className=\"trigger\">\r\n                            <OverlayTrigger\r\n                                trigger=\"click\"\r\n                                key={\"left\"}\r\n                                placement={\"bottom\"}\r\n                                overlay={\r\n                                    <Popover id={`popover-positioned-left`} className=\"toolspit\">\r\n                                        <Popover.Title as=\"h3\" className=\"inst-header\">Sort by</Popover.Title>\r\n                                        <Popover.Content>\r\n                                            <p className=\"sort\" onClick={() => setSort(true)}>Ascending</p>\r\n                                            <p className=\"sort\" onClick={() => setSort(false)}>Descending</p>\r\n                                        </Popover.Content>\r\n                                    </Popover>\r\n                                }\r\n                            >\r\n                                <p className=\"sort\"><img src=\"https://img.icons8.com/ios-glyphs/24/F07841/sorting-answers.png\" alt=\"\" /> Sort</p>\r\n                            </OverlayTrigger>\r\n                            <input type=\"search\" placeholder=\"Search by Page Name\" className=\"search-inp\" value={searchValue} onChange={(e) => setSearchValue(e.target.value)} />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div>\r\n                        {\r\n                            schools && schools.map(sch => {\r\n                                return sch.Profile.name.toString() === selectedPage ? (\r\n                                    sch.Business ?\r\n                                        (\r\n                                            <div className=\"trend-section\">\r\n                                                <Table responsive>\r\n                                                    <thead>\r\n                                                        <tr>\r\n                                                            <th className=\"username\">No..</th>\r\n                                                            <th className=\"username\"></th>\r\n                                                            <th className=\"email\">Page Name</th>\r\n                                                            <th className=\"school\">Category</th>\r\n                                                            <th className=\"email\">Phone no</th>\r\n                                                            <th className=\"school\">Owner</th>\r\n                                                            <th className=\"school\">No of Subscribers</th>\r\n                                                        </tr>\r\n                                                    </thead>\r\n                                                    <tbody>\r\n                                                        {\r\n                                                            sort ?\r\n                                                                (\r\n                                                                    Object.values(sch.Business.Category.General).filter(cr => cr.name.toLowerCase().includes(searchValue.toLowerCase())).sort().map((bus, i) => {\r\n                                                                        return <tr>\r\n                                                                            <td className=\"bus-name\">{i + 1}</td>\r\n                                                                            <td><img src={bus.cover_photo} alt=\"\" className=\"cover-photo\" /></td>\r\n                                                                            <td className=\"bus-name\">{bus.name}</td>\r\n                                                                            <td className=\"bus-name\">\r\n                                                                                <select name={bus.category} className=\"material-field\">\r\n                                                                                    {\r\n                                                                                        bus.category && bus.category.map(category => {\r\n                                                                                            return <option>{category}</option>\r\n\r\n                                                                                        })\r\n                                                                                    }\r\n                                                                                </select>\r\n                                                                            </td>\r\n                                                                            <td className=\"bus-name\">{bus.phone}</td>\r\n                                                                            <td className=\"bus-name\">{bus.user.username}</td>\r\n                                                                            <td className=\"bus-name\">\r\n                                                                                {users && users.map(user => {\r\n                                                                                    return user.Profile.id === bus.user.id ?\r\n                                                                                        (user.Subscribed_users ?\r\n                                                                                            (Object.keys(user.Subscribed_users).includes(bus.id)) ?\r\n                                                                                                Object.values(user.Subscribed_users).length\r\n                                                                                                : 0\r\n                                                                                            : 0)\r\n                                                                                        : \"\"\r\n                                                                                })}\r\n                                                                            </td>\r\n                                                                        </tr>\r\n                                                                    })\r\n                                                                )\r\n                                                                :\r\n                                                                (\r\n                                                                    Object.values(sch.Business.Category.General).filter(cr => cr.name.toLowerCase().includes(searchValue.toLowerCase())).reverse().map((bus, i) => {\r\n                                                                        return <tr>\r\n                                                                            <td className=\"bus-name\">{i + 1}</td>\r\n                                                                            <td><img src={bus.cover_photo} alt=\"\" className=\"cover-photo\" /></td>\r\n                                                                            <td className=\"bus-name\">{bus.name}</td>\r\n                                                                            <td className=\"bus-name\">\r\n                                                                                <select name={bus.category} className=\"material-field\">\r\n                                                                                    {\r\n                                                                                        bus.category && bus.category.map(category => {\r\n                                                                                            return <option>{category}</option>\r\n\r\n                                                                                        })\r\n                                                                                    }\r\n                                                                                </select>\r\n                                                                            </td>\r\n                                                                            <td className=\"bus-name\">{bus.phone}</td>\r\n                                                                            <td className=\"bus-name\">{bus.user.username}</td>\r\n                                                                            <td className=\"bus-name\">\r\n                                                                                {users && users.map(user => {\r\n                                                                                    return user.Profile?.id === bus.user.id ?\r\n                                                                                        (user.Subscribed_users ?\r\n                                                                                            (Object.keys(user.Subscribed_users).includes(bus.id)) ?\r\n                                                                                                Object.values(user.Subscribed_users).length\r\n                                                                                                : 0\r\n                                                                                            : 0)\r\n                                                                                        : \"\"\r\n                                                                                })}\r\n                                                                            </td>\r\n                                                                        </tr>\r\n                                                                    })\r\n                                                                )\r\n\r\n                                                        }\r\n                                                    </tbody>\r\n\r\n                                                </Table>\r\n\r\n\r\n\r\n                                            </div>\r\n                                        )\r\n                                        :\r\n                                        (\r\n                                            <p style={{ textAlign: 'center' }}>No Business for {selectedPage}</p>\r\n                                        )\r\n\r\n                                ) : \"\"\r\n\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pages\r\n","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Users\\index.jsx",["224","225","226","227","228","229","230"],"import React, { useEffect, useState, useMemo } from 'react'\r\nimport fire from \"../../Firebase/firebase\"\r\n\r\nimport \"./users.css\"\r\n\r\nimport { Table } from \"react-bootstrap\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport Pagination from \"../Pagination\"\r\nimport Spinner from \"../Spinner\"\r\nimport { OverlayTrigger, Popover, Button } from \"react-bootstrap\"\r\n\r\nimport HeaderNav from \"../HeaderNav\"\r\n\r\nfunction Users() {\r\n\r\n    const [users, setUsers] = useState();\r\n    const [loading, setLoading] = useState(false)\r\n    const [searchValue, setSearchValue] = useState('')\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [postPerPage, setPostPerPage] = useState(25)\r\n    const [sort, setSort] = useState(true)\r\n    const [roll, setRoll] = useState()\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchUsers = async () => {\r\n            setLoading(true);\r\n            var userRef = await fire.database().ref().child(\"Users\")\r\n            userRef.on('value', snap => {\r\n                const user = snap.val();\r\n                const userList = [];\r\n\r\n                for (let m in user) {\r\n                    userList.push(user[m]);\r\n                }\r\n                setUsers(userList);\r\n                setLoading(false)\r\n                setRoll(userList.length)\r\n            })\r\n\r\n        }\r\n        fetchUsers()\r\n    }, [])\r\n\r\n\r\n    const userDetails = (id) => {\r\n        return window.location.href = `/user/${id}`\r\n\r\n    }\r\n\r\n    const indexOfLastPost = currentPage * postPerPage;\r\n    const indexOfFirstPost = indexOfLastPost - postPerPage\r\n\r\n\r\n\r\n    const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n    const searchResult = users && users.filter(cr => cr.Profile?.username.toLowerCase().includes(searchValue.toLowerCase()))\r\n    const currentPosts = searchResult && searchResult\r\n\r\n    const descendingSort = currentPosts && currentPosts.sort((a, b) => (b.Profile.date_joined - a.Profile.date_joined))\r\n\r\n\r\n\r\n    const onSearch = (e) => {\r\n        if (searchValue.length > 0) {\r\n            setSearchValue(e)\r\n            setRoll(1)\r\n        } else {\r\n            setSearchValue(e)\r\n            setRoll(roll)\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <HeaderNav />\r\n\r\n            <div className=\"app-div\">\r\n                <div className=\"users-section\">\r\n                    <div className=\"search-div\">\r\n                        <h3 className=\"userss\">Users</h3>\r\n                        <div className=\"trigger\">\r\n                            <OverlayTrigger\r\n                                trigger=\"click\"\r\n                                key={\"left\"}\r\n                                placement={\"bottom\"}\r\n                                overlay={\r\n                                    <Popover id={`popover-positioned-left`} className=\"toolspit\">\r\n                                        <Popover.Title as=\"h3\" className=\"inst-header\">Sort by</Popover.Title>\r\n                                        <Popover.Content>\r\n                                            <p className=\"sort\" onClick={() => setSort(true)}>Oldest</p>\r\n                                            <p className=\"sort\" onClick={() => setSort(false)}>Earliest</p>\r\n                                        </Popover.Content>\r\n                                    </Popover>\r\n                                }\r\n                            >\r\n                                <p className=\"sort\"><img src=\"https://img.icons8.com/ios-glyphs/24/F07841/sorting-answers.png\" alt=\"\" /> Sort</p>\r\n                            </OverlayTrigger>\r\n                            <input type=\"search\" placeholder=\"Search by Username\" className=\"search-inp\" value={searchValue} onChange={(e) => onSearch(e.target.value)} />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <Table responsive>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>No..</th>\r\n                                <th></th>\r\n                                <th className=\"username\">UserName</th>\r\n                                <th className=\"email\">Email</th>\r\n                                <th className=\"school\">School</th>\r\n                                <th className=\"dept\">Department</th>\r\n                                <th className=\"joined\">Date Joined</th>\r\n                            </tr>\r\n                        </thead>\r\n                        {\r\n                            loading ?  <div style={{display: 'flex',  marginTop: \"2%\", width: '500%', justifyContent: 'center', alignItems: 'center'}}><img src=\"https://res.cloudinary.com/doouwbecx/image/upload/v1605480900/25_1_f13z4c.gif\" alt=\"\" /></div> :\r\n                           ( sort ?\r\n                                (currentPosts && currentPosts.sort((a, b) => (a.Profile.date_joined - b.Profile.date_joined)).map((user, i) => {\r\n                                    return <tbody>\r\n                                        <tr>\r\n                                            <td>{i + 1}</td>\r\n                                            <td><img src={user.Profile.image} alt=\"\" className=\"user-image\" /></td>\r\n                                            <td className=\"bus-name\"><p style={{ fontSize: '15px', cursor: \"pointer\" }} onClick={() => userDetails(user.Profile.id)}>{user.Profile.username}</p></td>\r\n                                            <td className=\"bus-name\">{user.Profile.email}</td>\r\n                                            <td className=\"bus-name\">{user.Profile.institution}</td>\r\n                                            <td className=\"bus-name\">{user.Profile.dept}</td>\r\n                                            <td className=\"bus-name\">{user.Profile.date_joined ? user.Profile.date_joined.toUTCString() : \"Unavailable\"}</td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                })\r\n                                )\r\n                                :\r\n                                (descendingSort && descendingSort.map((user, i) => {\r\n                                    return <tbody>\r\n                                        <tr>\r\n                                            <td>{i + 1}</td>\r\n                                            <td><img src={user.Profile.image} alt=\"\" className=\"user-image\" /></td>\r\n                                            <td className=\"bus-name\"><p style={{ fontSize: '15px', cursor: \"pointer\" }} onClick={() => userDetails(user.Profile.id)}>{user.Profile.username}</p></td>\r\n                                            <td className=\"bus-name\">{user.Profile.email}</td>\r\n                                            <td className=\"bus-name\">{user.Profile.institution}</td>\r\n                                            <td className=\"bus-name\">{user.Profile.dept}</td>\r\n                                            <td className=\"bus-name\">{user.Profile.date_joined ? user.Profile.date_joined.toUTCString() : \"Unavailable\"}</td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                })\r\n                                )\r\n                           )}\r\n                    </Table>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Users\r\n","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Schools\\index.jsx",["231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248"],"import React, { useState, useEffect } from 'react'\r\nimport \"./schools.css\"\r\nimport { useForm } from \"react-hook-form\"\r\n\r\nimport fire from \"../../Firebase/firebase\"\r\nimport { Spinner, Table, OverlayTrigger, Popover, Modal, Button } from \"react-bootstrap\"\r\nimport Pagination from \"../Pagination\"\r\nimport HeaderNav from '../HeaderNav'\r\n\r\n\r\nimport { storage } from \"../../Firebase/firebase\"\r\n\r\n\r\nfunction Schools() {\r\n    const [schools, setSchools] = useState()\r\n    const [institutions, setInstitutions] = useState();\r\n    const [loading, setLoading] = useState(false)\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [postPerPage, setPostPerPage] = useState(10)\r\n    const [searchValue, setSearchValue] = useState('')\r\n    const [sort, setSort] = useState(false)\r\n    const [show, setShow] = useState(false);\r\n    const [roll, setRoll] = useState()\r\n    const [schoolName, setSchoolName] = useState('')\r\n    const [faculty, setFaculty] = useState(\r\n        {\r\n            school: [\r\n                {\r\n                    faculty: \"\",\r\n                    department: [\"\"]\r\n                }\r\n            ]\r\n        }\r\n    )\r\n    const [institutionType, setInstitutionType] = useState('')\r\n    const [imageUrl, setImageUrl] = useState(null)\r\n    const [urls, setUrls] = useState(\"\");\r\n    const [progress, setProgress] = useState(0)\r\n\r\n\r\n\r\n    const handleClose = () => {\r\n        setShow(false);\r\n        setSchoolName(\"\")\r\n        setInstitutionType('')\r\n        setUrls(\"\")\r\n        setProgress(0)\r\n\r\n    }\r\n    const handleShow = () => setShow(true);\r\n\r\n\r\n\r\n\r\n    const indexOfLastPost = currentPage * postPerPage;\r\n    const indexOfFirstPost = indexOfLastPost - postPerPage\r\n    const currentPosts = schools && schools\r\n\r\n    const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            // setLoading(true)\r\n            var schoolRef = await fire.database().ref().child(\"Schools\")\r\n            schoolRef.on('value', snap => {\r\n                const school = snap.val();\r\n                const schoolList = [];\r\n                for (let m in school) {\r\n                    schoolList.push(school[m]);\r\n                }\r\n                setSchools(schoolList)\r\n                // setLoading(false)\r\n                setRoll(schoolList.length)\r\n            })\r\n\r\n            var institutionRef = await fire.database().ref().child(\"Institutions\")\r\n            institutionRef.on('value', snap => {\r\n                const institution = snap.val();\r\n                const institutionList = [];\r\n                for (let m in institution) {\r\n                    institutionList.push(institution[m]);\r\n                }\r\n                setInstitutions(institutionList);\r\n            })\r\n        }\r\n\r\n        fetchData()\r\n    }, [])\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const handleRoute = (id) => {\r\n        return window.location.href = `/schools/${id}`\r\n    }\r\n\r\n    const searchResult = schools && schools.filter(cr => cr.Profile ? cr.Profile.name.toLowerCase().includes(searchValue.toLowerCase()) : undefined)\r\n\r\n    var mts = schools && schools.length\r\n\r\n\r\n    const dr = faculty.school.map(fac => {\r\n        return (\r\n            {\r\n                Departments: fac.department.map(dp => {\r\n                    return {\r\n                        id: dp,\r\n                        schools: {\r\n                            id: fac.faculty,\r\n                            school: schoolName\r\n                        }\r\n                    }\r\n                }),\r\n                id: fac.faculty,\r\n                school: schoolName,\r\n\r\n\r\n            }\r\n        )\r\n    })\r\n\r\n    const handleUpload = (event) => {\r\n        if (event.target.files[0]) {\r\n            setImageUrl(event.target.files[0])\r\n        }\r\n        const imageUrls = event.target.files[0]\r\n        const imgName = event.target.files[0].name\r\n\r\n        const uploadFile = storage.ref(`school logos/${imgName}`).put(imageUrls)\r\n\r\n        uploadFile.on(\r\n            \"state_changed\",\r\n            snapshot => {\r\n                const progres = Math.round(\r\n                    (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n                )\r\n                setProgress(progres)\r\n            },\r\n            error => {\r\n                console.log(error)\r\n            },\r\n            () => {\r\n                storage.ref(\"school logos\")\r\n                    .child(imgName)\r\n                    .getDownloadURL()\r\n                    .then(url => {\r\n                        console.log({ url })\r\n                        setUrls(url)\r\n                    })\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    const handleSubmits = () => {\r\n        const matches = schoolName.match(/\\b(\\w)/g);\r\n        const acrony = matches.join('');\r\n\r\n        var schoolRef = fire.database().ref().child(\"Schools\")\r\n        schoolRef.child(schoolName).set({\r\n            Faculties: true,\r\n            Profile: {\r\n                name: schoolName,\r\n            },\r\n        })\r\n\r\n        var schoolRef = fire.database().ref().child(\"Institutions\")\r\n        schoolRef.child(schoolName).set({\r\n            name: schoolName,\r\n            type: institutionType,\r\n            image: urls,\r\n        })\r\n\r\n        var schoolRef = fire.database().ref().child(\"Institution Types\")\r\n        schoolRef.on('value', snap => {\r\n            const school = snap.val();\r\n            Object.entries(school).map(a => {\r\n                if (a[0] === institutionType) {\r\n                    schoolRef.child(a[0]).child(acrony).set({\r\n                        id: acrony,\r\n                        name: schoolName\r\n                    })\r\n                } else {\r\n                    return;\r\n                }\r\n            })\r\n\r\n        })\r\n\r\n\r\n\r\n        setSchoolName(\"\")\r\n        setInstitutionType('')\r\n        setFaculty(\r\n            {\r\n                school: [\r\n                    {\r\n                        faculty: \"\",\r\n                        department: [\"\"]\r\n                    }\r\n                ]\r\n            }\r\n        )\r\n\r\n        setUrls(\"\")\r\n        setProgress(0)\r\n        handleClose()\r\n\r\n    }\r\n\r\n\r\n    const onSearch = (e) => {\r\n        if (searchValue.length > 0) {\r\n            setSearchValue(e)\r\n            setRoll(1)\r\n        } else {\r\n            setSearchValue(e)\r\n            setRoll(roll)\r\n        }\r\n\r\n    }\r\n\r\n    // console.log(\"img\", imageUrl)\r\n\r\n    return (\r\n        <div>\r\n            <HeaderNav />\r\n\r\n            <div className=\"app-div\">\r\n                <div className='school-page'>\r\n                    <div className=\"search-div\">\r\n                        <h3>All Schools</h3>\r\n                        <div className=\"trigger\">\r\n                            <OverlayTrigger\r\n                                trigger=\"click\"\r\n                                key={\"left\"}\r\n                                placement={\"bottom\"}\r\n                                overlay={\r\n                                    <Popover id={`popover-positioned-left`} className=\"toolspit\">\r\n                                        <Popover.Title as=\"h3\" className=\"inst-header\">Sort by</Popover.Title>\r\n                                        <Popover.Content>\r\n                                            <p className=\"sort\" onClick={() => setSort(true)}>Ascending</p>\r\n                                            <p className=\"sort\" onClick={() => setSort(false)}>Descending</p>\r\n                                        </Popover.Content>\r\n                                    </Popover>\r\n                                }\r\n                            >\r\n                                <p className=\"sort\"><img src=\"https://img.icons8.com/ios-glyphs/24/F07841/sorting-answers.png\" alt=\"\" /> Sort</p>\r\n                            </OverlayTrigger>\r\n                            <input type=\"search\" placeholder=\"Search by School name\" className=\"search-inp\" value={searchValue} onChange={(e) => onSearch(e.target.value)} />\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"plus\" onClick={handleShow}>\r\n                        <img src=\"https://img.icons8.com/ios-glyphs/50/F07841/plus.png\" alt=\"\" className=\"plus-image\" />\r\n                    </div>\r\n                    <Modal show={show} onHide={handleClose}>\r\n                        <Modal.Header closeButton>\r\n                            <p className=\"create\">Create New School</p>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n\r\n                            <div>\r\n                                <label className=\"labels\">Name of School</label><br />\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    value={schoolName}\r\n                                    onChange={(e => setSchoolName(e.target.value))} />\r\n\r\n                                <select name=\"institution\" className=\"select-inst\" onChange={(e) => setInstitutionType(e.target.value)}>\r\n                                    <option>Type of Institution</option>\r\n                                    <option value=\"Federal Polytechnics\">Federal Polytechnics</option>\r\n                                    <option value=\"State Polytechnics\">State Polytechnics</option>\r\n                                    <option value=\"Federal Universities\">Federal Universities</option>\r\n                                    <option value=\"State Universities\">State Universities</option>\r\n                                    <option value=\"Private Universities\">Private Universities</option>\r\n                                    <option value=\"College of Education\">College of Education</option>\r\n                                </select>\r\n\r\n\r\n                                <div style={{ padding: \"10px\", width: \"100%\" }}>\r\n                                    <input\r\n                                        type=\"file\"\r\n                                        class=\" w-100 upload-but\"\r\n                                        onChange={handleUpload}\r\n                                    />\r\n                                </div>\r\n\r\n                                <label for=\"file\" className=\"logo-upload\">Logo Uploading progress:</label>\r\n                                <progress value={progress} max=\"100\" className=\"progressbar\" />\r\n                            </div>\r\n\r\n                            <div className=\"button-div\">\r\n                                <button className=\"btnss\" type=\"submit\" onClick={() => handleSubmits()} disabled={schoolName === \"\" || institutionType === \"\" || urls === \"\"}>Add School</button>\r\n                            </div>\r\n                        </Modal.Body>\r\n                    </Modal>\r\n\r\n                    <Table responsive>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>No.</th>\r\n                                <th className=\"username\">Schools</th>\r\n                                <th className=\"email\">Faculty</th>\r\n                                <th className=\"school\">Gists</th>\r\n                                <th className=\"dept\">Campaign</th>\r\n                                <th className=\"status\">Users</th>\r\n                            </tr>\r\n                        </thead>\r\n                        {\r\n                            sort ?\r\n                                (\r\n                                    searchResult && searchResult.sort((a, b) => (a.Profile.name.localeCompare(b.Profile.name))).map((school, index) => {\r\n                                        return <tbody>\r\n                                            <tr >\r\n                                                <td>{index + 1}</td>\r\n                                                <td style={{ cursor: 'pointer' }} onClick={() => handleRoute(school.Profile.name)}>{school.Profile ? school.Profile.name : undefined}</td>\r\n                                                <td className=\"bus-name\">{school.Faculties ? Object.keys(school.Faculties).length : undefined}</td>\r\n                                                {school.Posts ?\r\n                                                    <td className=\"bus-name\">{Object.keys(school.Posts).length}</td> : <td className=\"bus-name\">0</td>\r\n                                                }\r\n                                                <td className=\"bus-name\">{school.CAMPAIGN ? Object.keys(school.CAMPAIGN).length : undefined}</td>\r\n                                                <td className=\"bus-name\">{school.Users ? Object.keys(school.Users).length : undefined}</td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    })\r\n                                )\r\n                                :\r\n                                (\r\n                                    searchResult && searchResult.reverse().map((school, index) => {\r\n                                        return <tbody>\r\n                                            <tr >\r\n                                                <td>{index + 1}</td>\r\n                                                <td style={{ cursor: 'pointer' }} onClick={() => handleRoute(school.Profile.name)}>{school.Profile.name}</td>\r\n                                                <td className=\"bus-name\">{school.Faculties ? Object.keys(school.Faculties).length : undefined}</td>\r\n                                                {school.Posts ?\r\n                                                    <td className=\"bus-name\">{Object.keys(school.Posts).length}</td> : <td className=\"bus-name\">0</td>\r\n                                                }\r\n                                                <td className=\"bus-name\">{school.CAMPAIGN ? Object.keys(school.CAMPAIGN).length : undefined}</td>\r\n                                                <td className=\"bus-name\">{school.Users ? Object.keys(school.Users).length : undefined}</td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    })\r\n                                )\r\n                        }\r\n                    </Table>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Schools\r\n","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Search\\index.jsx",["249","250","251","252","253","254","255"],"import React, {useState, useEffect} from 'react'\r\n\r\nimport * as QueryString from \"query-string\"\r\nimport fire from \"../../Firebase/firebase\"\r\nimport { Col, Container, Row } from 'react-bootstrap'\r\n\r\n\r\nfunction Search(props) {\r\n    const [schools, setSchools] = useState()\r\n    const [flag, setFlag] = useState()\r\n    const [selectedGist, setSelectedGist] = useState(\"Ambrose Alli University\")\r\n\r\n    useEffect(() => {\r\n        var schoolRef = fire.database().ref().child(\"Schools\")\r\n        schoolRef.on('value', snap => {\r\n            const school = snap.val();\r\n            // const mt = Object.values(school.Posts) ? Object.values(school) : undefined\r\n            console.log(school)\r\n            const schoolList = [];\r\n            for (let m in school) {\r\n                schoolList.push(school[m]);\r\n            }\r\n            console.log(\"school list\",schoolList)\r\n            setSchools(schoolList)\r\n        })\r\n\r\n\r\n        var FlagRef = fire.database().ref().child(\"Flagged Gist\")\r\n        FlagRef.on('value', snap => {\r\n            const flag = snap.val();\r\n            const allFlag = flag.All\r\n            const flagList = [];\r\n            flagList.push(allFlag)\r\n            setFlag(flagList)\r\n        })\r\n\r\n\r\n\r\n    }, [])\r\n\r\n    const parsed = QueryString.parse(props.location.search)\r\n\r\n    const sendFlag = []\r\n    flag && flag.map(fs => Object.values(fs).map(fd => sendFlag.push(fd.postid)))\r\n\r\n    const result = []\r\n    schools && schools.map(sch => {\r\n        // for (let z in sch) {\r\n        //     if (sch.Posts) {\r\n        //         result.push(sch.Posts[z])\r\n        //     }\r\n            \r\n        // }\r\n        result.push(sch.Posts)\r\n        \r\n    })\r\n    console.log(result)\r\n    \r\n    // const another = result && result.reduce((r,o) => {\r\n    //     Object.keys(o).forEach((k) => {\r\n    //         r.push(o[k])\r\n    //     })\r\n    //     console.log(\"not sure\", r)\r\n    // })\r\n    return (\r\n        <div>\r\n            <p>Hello Search</p>\r\n\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col>\r\n                        {\r\n                            schools && schools.map(sch => {\r\n                                return sch.Posts ? (\r\n\r\n                                        <div>\r\n                                            {\r\n\r\n                                                Object.values(sch.Posts).filter(cr => new Date(cr.date).toDateString() >= new Date(parsed.start).toDateString() && new Date(cr.date).toDateString() <= new Date(parsed.end).toDateString()).map(scc => {\r\n                                                    return <Container fluid>\r\n                                                        <Row>\r\n                                                            <Col>\r\n                                                                <div className=\"all-gist\">\r\n\r\n                                                                    <div className=\"\">\r\n                                                                        <div className=\"allgist-div1\">\r\n                                                                            <img src={scc.userDp} alt=\"\" className=\"gist-image\" />\r\n                                                                            <div className=\"allgist-div1-sub\">\r\n                                                                                <p className=\"allgist-div1-sub-header\">{scc.user.institution}</p>\r\n                                                                                <p className=\"allgist-div1-sub-text\">Posted by {scc.user.username}, {new Date(scc.date).toDateString()}</p>\r\n                                                                            </div>\r\n                                                                        </div>\r\n                                                                        <div>\r\n                                                                            <p>{scc.text}</p>\r\n                                                                        </div>\r\n\r\n\r\n                                                                        <div className=\"action\">\r\n                                                                            <div style={{ display: 'flex', justifyContent: 'flex-start', alignItems: 'center' }}>\r\n                                                                                <img src=\"https://img.icons8.com/ios-glyphs/14/000000/chat.png\" />\r\n                                                                                <p className=\"list\">{scc.comments ? Object.keys(scc.comments).length : 0} comment</p>\r\n                                                                            </div>\r\n                                                                            <div style={{ display: 'flex', justifyContent: 'flex-start', alignItems: 'center' }}>\r\n                                                                                <img src=\"https://img.icons8.com/ios-glyphs/14/000000/filled-like.png\" />\r\n                                                                                <p className=\"list\">{scc.Likes ? Object.keys(scc.Likes).length : 0} like</p>\r\n                                                                            </div>\r\n                                                                            <div style={{ display: 'flex', justifyContent: 'flex-start', alignItems: 'center' }}>\r\n                                                                                <img src=\"https://img.icons8.com/material-two-tone/14/000000/retweet.png\" />\r\n                                                                                <p className=\"list\">{scc.comments ? Object.keys(scc.comments).length : 0} Retweet</p>\r\n                                                                            </div>\r\n                                                                        </div>\r\n                                                                    </div>\r\n\r\n\r\n\r\n\r\n                                                                    <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n                                                                        <img src={scc.userDp} alt=\"\" className=\"allround-image\" />\r\n                                                                        {sendFlag.includes(scc.postid) ? <img src=\"https://img.icons8.com/ios-filled/24/FF0000/flag.png\" /> : \"\"}\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </Col>\r\n                                                        </Row>\r\n\r\n\r\n\r\n                                                    </Container>\r\n                                                })\r\n\r\n                                            }\r\n                                        </div>) : undefined\r\n\r\n                            })\r\n\r\n                        }\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search\r\n","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Overview\\index.jsx",["256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298"],"C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Materials\\index.jsx",["299","300","301","302","303","304","305","306","307","308","309"],"import React, { useState, useEffect } from 'react'\r\nimport \"./materials.css\"\r\n\r\nimport { firestore } from \"../../Firebase/firebase\"\r\nimport Spinner from \"../Spinner\"\r\nimport { OverlayTrigger, Popover, Table } from \"react-bootstrap\"\r\nimport Pagination from \"../Pagination\"\r\nimport CurrencyFormat from 'react-currency-format'\r\nimport HeaderNav from '../HeaderNav'\r\n\r\n\r\n\r\nfunction Materials() {\r\n    const [materials, setMaterials] = useState([])\r\n    const [loading, setLoading] = useState(false)\r\n    const [searchValue, setSearchValue] = useState('')\r\n    const [sort, setSort] = useState(\"all\")\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [postPerPage] = useState(15)\r\n    const [selectedValue, setSelectedValue] = useState('')\r\n\r\n\r\n    var mts = materials && materials.length\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchMaterials = async () => {\r\n            setLoading(true);\r\n            var MaterialRef = await firestore.collection(\"Materials\").doc('Category').collection('General').get()\r\n            var mat = []\r\n            MaterialRef.forEach(doc => {\r\n                mat.push(doc.data())\r\n            });\r\n            setMaterials(mat)\r\n            setLoading(false)\r\n        }\r\n        fetchMaterials()\r\n\r\n    }, [])\r\n\r\n    // if (loading) {\r\n    //     return <Spinner />\r\n    // }\r\n\r\n\r\n\r\n    const indexOfLastPost = currentPage * postPerPage;\r\n    const indexOfFirstPost = indexOfLastPost - postPerPage\r\n    const currentPosts = materials && materials\r\n\r\n\r\n    const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n\r\n    const searchResult = materials && materials.filter(cr => cr.document ? cr.document.name.toLowerCase().includes(searchValue.toLowerCase()) : undefined)\r\n\r\n    const descendingSort = searchResult && searchResult.reverse()\r\n\r\n\r\n    const handleChange = (e, material) => {\r\n        setSelectedValue(e.target.value)\r\n\r\n\r\n        const activeStatus = material.materialID\r\n\r\n        firestore.collection(\"Materials\").doc('Category').collection('General').doc(activeStatus).update({\r\n            status: e.target.value\r\n        })\r\n\r\n        setTimeout(() => {\r\n            window.location.reload()\r\n        }, 1000)\r\n    }\r\n\r\n    const price = materials && materials.reduce((total, pr) => total = total + parseInt(pr.charge, 10), 0)\r\n\r\n    return (\r\n        <div>\r\n            <HeaderNav />\r\n\r\n            <div className=\"app-div\">\r\n                <div className=\"users-section\">\r\n                    <div className=\"search-div\">\r\n                        <h1 className=\"amount\">Total Amount: \t&#8358;<CurrencyFormat value={price} displayType={'text'} thousandSeparator={true} style={{marginLeft: \"-1%\"}}/></h1>\r\n                        <div className=\"trigger\">\r\n                            <OverlayTrigger\r\n                                trigger=\"click\"\r\n                                key={\"left\"}\r\n                                placement={\"bottom\"}\r\n                                overlay={\r\n                                    <Popover id={`popover-positioned-left`} className=\"toolspit\">\r\n                                        <Popover.Title as=\"h3\" className=\"inst-header\">Sort by</Popover.Title>\r\n                                        <Popover.Content>\r\n                                            <p className=\"sort\" onClick={() => setSort(\"all\")}>All</p>\r\n                                            <p className=\"sort\" onClick={() => setSort(\"verified\")}>Verified</p>\r\n                                            <p className=\"sort\" onClick={() => setSort(\"unVerified\")}>Unverified</p>\r\n                                        </Popover.Content>\r\n                                    </Popover>\r\n                                }\r\n                            >\r\n                                <p className=\"sort\"><img src=\"https://img.icons8.com/ios-glyphs/24/F07841/sorting-answers.png\" alt=\"\" /> Sort</p>\r\n                            </OverlayTrigger>\r\n                            <input type=\"search\" placeholder=\"Search by Material Name\" className=\"search-inp\" value={searchValue} onChange={(e) => setSearchValue(e.target.value)} />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <Table responsive>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>No..</th>\r\n                                <th></th>\r\n                                <th className=\"username\">Material</th>\r\n                                <th className=\"email\">Material Type</th>\r\n                                <th className=\"school\">Status</th>\r\n                                <th className=\"dept\">Action Type</th>\r\n                                <th className=\"status\">Documents</th>\r\n                                <th className=\"username\">Charge(Naira)</th>\r\n                                <th className=\"username\">Stars</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                loading ?  <div style={{display: 'flex', flex: 1, justifyContent: 'center', alignItems: 'center'}}><img src=\"https://res.cloudinary.com/doouwbecx/image/upload/v1605480900/25_1_f13z4c.gif\" alt=\"\" /></div> :\r\n                                (sort === \"verified\" ?\r\n                                    (\r\n                                        searchResult && searchResult.filter((a, b) => (a.status === \"VERIFIED\")).map((material, i) => {\r\n                                            return <tr key={i}>\r\n                                                <td className=\"material-status\">{i + 1}</td>\r\n                                                <td>{material.coverPhoto ? <img src={material.coverPhoto} alt=\"\" className=\"cover-photo\" /> : ''}</td>\r\n                                                <td className=\"material-doc\">{material.document.name}</td>\r\n                                                <td className=\"material-status\">\r\n                                                    <select name={material.categories} className=\"material-field\">\r\n                                                        {\r\n                                                            material.categories && material.categories.map(category => {\r\n                                                                return <option>{category}</option>\r\n\r\n                                                            })\r\n                                                        }\r\n                                                    </select>\r\n\r\n                                                </td>\r\n\r\n                                                <td className={material.status === \"VERIFIED\" ? \"verified-status\" : material.status === \"NON_VERIFIED\" ? \"non-verified-status\" : \"denied-status\"}>{material.status}</td>\r\n                                                <td className=\"material-status\">\r\n                                                    <select name={material.document.name} className=\"select-field\" onChange={(e) => handleChange(e, material)}>\r\n                                                        <option>Move to</option>\r\n                                                        <option value=\"VERIFIED\">VERIFIED</option>\r\n                                                        <option value=\"NON_VERIFIED\">NON_VERIFIED</option>\r\n                                                        <option value=\"DENIED\">DENIED</option>\r\n                                                    </select>\r\n                                                </td>\r\n                                                <td className=\"material-status\"><a href={material.document.url} target=\"_blank\" className=\"btn btns2\" >View</a></td>\r\n                                                <td className=\"material-status\">{material.charge}</td>\r\n                                                <td className=\"material-status\">{material.stars}</td>\r\n                                            </tr>\r\n                                        })\r\n                                    ) :\r\n                                    sort === \"all\" ? (\r\n                                        searchResult && searchResult.map((material, i) => {\r\n                                            return <tr key={i}>\r\n                                                <td className=\"material-status\">{i + 1}</td>\r\n                                                <td>{material.coverPhoto ? <img src={material.coverPhoto} alt=\"\" className=\"cover-photo\" /> : ''}</td>\r\n                                                <td className=\"material-doc\">{material.document.name}</td>\r\n                                                <td className=\"material-status\">\r\n                                                    <select name={material.categories} className=\"material-field\">\r\n                                                        {\r\n                                                            material.categories && material.categories.map(category => {\r\n                                                                return <option>{category}</option>\r\n\r\n                                                            })\r\n                                                        }\r\n                                                    </select>\r\n\r\n                                                </td>\r\n\r\n                                                <td className={material.status === \"VERIFIED\" ? \"verified-status\" : material.status === \"NON_VERIFIED\" ? \"non-verified-status\" : \"denied-status\"}>{material.status}</td>\r\n                                                <td className=\"material-status\">\r\n                                                    <select name={material.document.name} className=\"select-field\" onChange={(e) => handleChange(e, material)}>\r\n                                                        <option>Move to</option>\r\n                                                        <option value=\"VERIFIED\">VERIFIED</option>\r\n                                                        <option value=\"NON_VERIFIED\">NON_VERIFIED</option>\r\n                                                        <option value=\"DENIED\">DENIED</option>\r\n                                                    </select>\r\n                                                </td>\r\n                                                <td className=\"material-status\"><a href={material.document.url} target=\"_blank\" className=\"btn btns2\" >View</a></td>\r\n                                                <td className=\"material-status\">{material.charge}</td>\r\n                                                <td className=\"material-status\">{material.stars}</td>\r\n                                            </tr>\r\n                                        })\r\n                                    )\r\n                                        :\r\n                                        (\r\n                                            searchResult && searchResult.filter((a, b) => (a.status === \"NON_VERIFIED\")).map((material, i) => {\r\n                                                return <tr key={i}>\r\n                                                    <td className=\"material-status\">{i + 1}</td>\r\n                                                    <td >{material.coverPhoto ? <img src={material.coverPhoto} alt=\"\" className=\"cover-photo\" /> : ''}</td>\r\n                                                    <td className=\"material-doc\">{material.document.name}</td>\r\n                                                    <td className=\"material-status\">\r\n                                                        <select name={material.categories} className=\"material-field\">\r\n                                                            {\r\n                                                                material.categories && material.categories.map(category => {\r\n                                                                    return <option>{category}</option>\r\n\r\n                                                                })\r\n                                                            }\r\n                                                        </select>\r\n\r\n                                                    </td>\r\n\r\n                                                    <td className={material.status === \"VERIFIED\" ? \"verified-status\" : material.status === \"NON_VERIFIED\" ? \"non-verified-status\" : \"denied-status\"}>{material.status}</td>\r\n                                                    <td className=\"material-status\">\r\n                                                        <select name={material.document.name} className=\"select-field\" onChange={(e) => handleChange(e, material)}>\r\n                                                            <option>Move to</option>\r\n                                                            <option value=\"VERIFIED\">VERIFIED</option>\r\n                                                            <option value=\"NON_VERIFIED\">NON_VERIFIED</option>\r\n                                                            <option value=\"DENIED\">DENIED</option>\r\n                                                        </select>\r\n                                                    </td>\r\n                                                    <td className=\"material-status\"><a href={material.document.url} target=\"_blank\" className=\"btn btns2\" >View</a></td>\r\n                                                    <td className=\"material-status\">{material.charge}</td>\r\n                                                    <td className=\"material-status\">{material.stars}</td>\r\n                                                </tr>\r\n                                            })\r\n                                        ))\r\n\r\n                            }\r\n                        </tbody>\r\n\r\n                    </Table>\r\n                </div >\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Materials\r\n","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\UserInfo\\index.jsx",["310","311","312","313","314","315","316","317","318","319","320","321"],"import React, { useEffect, useState } from 'react'\r\n\r\nimport \"./userInfo.css\"\r\n\r\nimport { Container, Col, Row, Tabs, Tab, Modal, Button } from \"react-bootstrap\"\r\n\r\n\r\nimport AllGist from \"../AllGist\"\r\nimport Peers from \"../Peers\"\r\n\r\nimport fire, { tokens } from \"../../Firebase/firebase\"\r\nimport PeerGroup from '../PeerGroup'\r\nimport Notification from \"../Notification\"\r\nimport Business from \"../Business\"\r\nimport Spinner from \"../Spinner\"\r\nimport PeerRequest from '../PeerRequest'\r\nimport HeaderNav from '../HeaderNav'\r\n\r\n\r\n\r\nfunction UserInfo(props) {\r\n\r\n\r\n    console.log({props})\r\n    \r\n    const [users, setUsers] = useState();\r\n    const [loading, setLoading] = useState(false)\r\n    const [show, setShow] = useState(false);\r\n    const [mail, setMail] = useState('')\r\n    const [userEmail, setUserEmail] = useState('')\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    const tokenid = tokens\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchUsers = async () => {\r\n            setLoading(true);\r\n            var userRef = await fire.database().ref().child(\"Users\")\r\n            userRef.on('value', snap => {\r\n                const user = snap.val();\r\n                const userList = [];\r\n                for (let m in user) {\r\n                    userList.push(user[m]);\r\n                }\r\n                setUsers(userList);\r\n                setLoading(false)\r\n            })\r\n\r\n        }\r\n        fetchUsers()\r\n\r\n    }, [])\r\n\r\n\r\n\r\n\r\n    const backClick = () => {\r\n        return window.location.href = '/users'\r\n    }\r\n\r\n    // if (loading) {\r\n    //     return <Spinner />;\r\n    // }\r\n\r\n\r\n    const sendPush = (email) => {\r\n        const recipient = email;\r\n\r\n        // Getting From Data when button clicked\r\n        const token = tokenid[0];\r\n        const notificationBody = mail;\r\n\r\n        // Adding data to payload for sending push notifications\r\n        let body = {\r\n            to: token,\r\n            notification: {\r\n                body: notificationBody,\r\n                click_action: \"/\",\r\n            }\r\n        };\r\n\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: new Headers({\r\n                // Add your server key after key=\r\n                Authorization: \"key=AAAApdxljRk:APA91bH3HxOyY8B2yJjT9XG93RiyfR6mixuTB673tWoItmOzzs1WEfMSCUiSLxNJeREdxzIYjt82CXdUOaXPmmrIAGEwUeBB1xIoFPssWS6oiBnX9rKfoSkuj7-JgYYl7sI4TaqZKKRSZ4P02h41PO020bNhCwtlTw\",\r\n                \"Content-Type\": \"application/json\"\r\n            }),\r\n            body: JSON.stringify(body)\r\n        };\r\n\r\n        // Sending Push notifications to user using fetch api\r\n        fetch(\"https://fcm.googleapis.com/fcm/send\", options)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                if (data.failure === 1) {\r\n                    alert(\"Token Expired\");\r\n                } else {\r\n                    alert(\"Send Success\");\r\n                }\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            });\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n            <HeaderNav />\r\n            <div className=\"app-div\">\r\n                {\r\n                    loading ?  <div style={{display: 'flex', flex: 1, justifyContent: 'center', alignItems: 'center'}}><img src=\"https://res.cloudinary.com/doouwbecx/image/upload/v1605480900/25_1_f13z4c.gif\" alt=\"\" /></div> :\r\n                    (\r\n                        <div>\r\n                <div className=\"user-info-page\">\r\n                    <p style={{ cursor: \"pointer\", width: '150px' }} onClick={() => backClick()}><span><img src=\"https://img.icons8.com/ios-glyphs/24/000000/arrow-pointing-left--v2.png\" /></span> Back</p>\r\n\r\n                    {\r\n                        users && users.map(user => {\r\n                            return user.Profile ? (\r\n                                user.Profile.id === props.match.params.userid ? (\r\n                                    <Container fluid>\r\n                                        <Row>\r\n                                            <Col lg=\"3\">\r\n                                                <div className=\"user-info-div1\">\r\n                                                    <div>\r\n                                                        <div className=\"info-image-div\">\r\n                                                            <img src={user.Profile.image} alt=\"\" className=\"users-info-image\" />\r\n                                                        </div>\r\n\r\n                                                        <h4 className=\"info-header\">{user.Profile.username}</h4>\r\n                                                        <p></p>\r\n                                                        <div className=\"mail-div\">\r\n                                                            <img src=\"https://img.icons8.com/ios-glyphs/35/D64400/appointment-reminders--v2.png\" alt=\"\" />\r\n                                                            <a href={\"mailto:\" + user.Profile.email} className=\"mail\" onClick={handleShow}>Send mail</a>\r\n                                                        </div>\r\n                                                    </div>\r\n\r\n\r\n                                                    <div className=\"breakpoint\">\r\n                                                        <div>\r\n                                                            <p className=\"info-span\">Username<br /><span className=\"info-text\">{user.Profile.username}</span></p>\r\n                                                            <p className=\"info-span\">Email<br /><span className=\"info-text\">{user.Profile.email}</span></p>\r\n                                                            <p className=\"info-span\">University<br /><span className=\"info-text\">{user.Profile.institution}</span></p>\r\n                                                            <p className=\"info-span\">Total Stars<br /><span className=\"info-text\">{user[\"Total Stars\"] ? user[\"Total Stars\"].count : 0}</span></p>\r\n                                                        </div>\r\n                                                        <div>\r\n                                                            <p className=\"info-span\">Faculty<br /><span className=\"info-text\">{user.Profile.faculty}</span></p>\r\n                                                            <p className=\"info-span\">Department<br /><span className=\"info-text\">{user.Profile.dept}</span></p>\r\n                                                            <p className=\"info-span\">Followers<br /><span className=\"info-text\">{user.Peers ? Object.keys(user.Peers).length : 0}</span></p>\r\n                                                            <p className=\"info-span\">App Version<br /><span className=\"info-text\">Not Available</span></p>\r\n                                                        </div>\r\n\r\n\r\n                                                    </div>\r\n                                                </div>\r\n\r\n\r\n                                            </Col>\r\n\r\n                                            <Col lg=\"9\">\r\n                                                <div className=\"lists\">\r\n                                                    <Tabs defaultActiveKey=\"All Gist\" id=\"uncontrolled-tab-example\" className=\"tab-list\">\r\n                                                        <Tab eventKey=\"All Gist\" title=\"All Gist\" className=\"\">\r\n                                                            <AllGist users={user} />\r\n                                                        </Tab>\r\n                                                        <Tab eventKey=\"Peers\" title=\"Peers\">\r\n                                                            <Peers users={user} />\r\n                                                        </Tab>\r\n                                                        <Tab eventKey=\"Group\" title=\"Group\">\r\n                                                            <PeerGroup users={user} />\r\n                                                        </Tab>\r\n                                                        {/* <Tab eventKey=\"Notification\" title=\"Notification\" className=\"\">\r\n                                                    <Notification users={user} />\r\n                                                </Tab> */}\r\n                                                        <Tab eventKey=\"Business\" title=\"Business\">\r\n                                                            <Business users={user} />\r\n                                                        </Tab>\r\n                                                        <Tab eventKey=\"Peer Request\" title=\"Peer Request\">\r\n                                                            <PeerRequest users={user} />\r\n                                                        </Tab>\r\n                                                    </Tabs>\r\n\r\n                                                </div>\r\n                                            </Col>\r\n\r\n                                        </Row>\r\n                                    </Container>\r\n                                ) : undefined\r\n                            ) : \"\"\r\n                        })\r\n                    }\r\n                </div>\r\n                </div>\r\n                    )\r\n                }\r\n\r\n                \r\n                \r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default UserInfo\r\n","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\CampaignInfo\\index.jsx",["322","323","324","325"],"import React, { useState, useEffect } from 'react'\r\nimport \"./campaignInfo.css\"\r\n\r\nimport { Container, Col, Row, Modal, Button } from \"react-bootstrap\"\r\nimport CurrencyFormat from \"react-currency-format\"\r\n\r\nimport fire from \"../../Firebase/firebase\"\r\nimport Spinner from \"../Spinner\"\r\nimport ImageModal from \"../ImageModal\"\r\nimport HeaderNav from '../HeaderNav'\r\n\r\nfunction CampaignInfo(props) {\r\n    const [campaigns, setCampaigns] = useState();\r\n    const [loading, setLoading] = useState(false)\r\n    const [show, setShow] = React.useState(false);\r\n    const [ids, setIds] = useState()\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = (id) => {\r\n        setShow(true);\r\n        setIds(id)\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchUsers = async () => {\r\n            setLoading(true);\r\n            var campaignRef = await fire.database().ref().child(\"CAMPAIGN\")\r\n            campaignRef.on('value', snap => {\r\n                const campaign = snap.val();\r\n                const campaignList = [];\r\n                for (let m in campaign) {\r\n                    campaignList.push(campaign[m]);\r\n                }\r\n                setCampaigns(campaignList);\r\n                setLoading(false)\r\n            })\r\n\r\n        }\r\n        fetchUsers()\r\n\r\n    }, [])\r\n\r\n\r\n\r\n\r\n    const backClick = () => {\r\n        return window.location.href = '/campaign'\r\n    }\r\n\r\n    // if (loading) {\r\n    //     return <Spinner />;\r\n    // }\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <HeaderNav />\r\n\r\n            {\r\n                loading ? <div style={{ display: 'flex', flex: 1, justifyContent: 'center', alignItems: 'center' }}><img src=\"https://res.cloudinary.com/doouwbecx/image/upload/v1605480900/25_1_f13z4c.gif\" alt=\"\" /></div> :\r\n                    (\r\n                        <div>\r\n                        <div className=\"app-div\">\r\n                            <div className=\"user-info-page\">\r\n                                <p style={{ cursor: \"pointer\", width: '150px' }} onClick={() => backClick()}><span><img src=\"https://img.icons8.com/ios-glyphs/24/000000/arrow-pointing-left--v2.png\" alt=\"\" /></span> Back</p>\r\n        \r\n                                {\r\n                                    campaigns && campaigns.map(user => {\r\n                                        return user.id === props.match.params.campaignid ? (\r\n        \r\n                                            <Container fluid>\r\n                                                <Row>\r\n                                                    <Col lg=\"3\">\r\n                                                        <div className=\"user-info-div1\">\r\n                                                            <div className=\"camps\">\r\n                                                                <div className=\"info-image-div\">\r\n                                                                    <img src={user.postContent.bizzpost.cover_photo} alt=\"\" className=\"users-info-image\" />\r\n                                                                </div>\r\n        \r\n                                                                <h4 className=\"info-header\">{user.postContent.user.username}</h4>\r\n                                                                <p className=\"info-text\">{user.postContent.user.institution}</p>\r\n                                                                <p className=\"info-text\">{user.postContent.user.dept}</p>\r\n                                                                <p></p>\r\n                                                            </div>\r\n        \r\n                                                            <div className=\"breakpoint\">\r\n                                                                <div>\r\n                                                                    <p className=\"info-span\">Business Owner<br /><span className=\"info-text\">{user.bizz.name}</span></p>\r\n                                                                    <p className=\"info-span\">Plan<br /><span className=\"info-text\">{user.plan}</span></p>\r\n                                                                    <p className=\"info-span\">Duration<br /><span className=\"info-text\">{user.duration}</span></p>\r\n                                                                    <p className=\"info-span\">No. Of Comments<br /><span className=\"info-text\">{user.stats ? user.stats.noOfComments : 0}</span></p>\r\n                                                                    <p className=\"info-span\">No. Of Likes<br /><span className=\"info-text\">{user.stats ? user.stats.noOfLikes : 0}</span></p>\r\n                                                                    <p className=\"info-span\">No. Of Regist<br /><span className=\"info-text\">{user.stats ? user.stats.noOfRegist : 0}</span></p>\r\n                                                                    <p className=\"info-span\">ClicksToPage<br /><span className=\"info-text\">{user.stats ? user.stats.clicksToPage : 0}</span></p>\r\n                                                                    <p className=\"info-span\">PhotoView<br /><span className=\"info-text\">{user.stats ? user.stats.photoViews : 0}</span></p>\r\n                                                                    <p className=\"info-span\">VideoView<br /><span className=\"info-text\">{user.stats ? user.stats.VideoViews : 0}</span></p>\r\n                                                                    <p className=\"info-span\">Date Created<br /><span className=\"info-text\">{new Date(user.date).toUTCString()}</span></p>\r\n        \r\n                                                                </div>\r\n                                                                <div>\r\n                                                                    <p className=\"info-span\">University</p>\r\n                                                                    <select className=\"select-conts\">\r\n                                                                        {\r\n                                                                            Object.values(user.schools).map(sch =>\r\n                                                                                <option>{sch}</option>\r\n                                                                            )\r\n        \r\n                                                                        }\r\n                                                                    </select>\r\n                                                                    <p className=\"info-span mt-3 bottom\">Price</p>\r\n                                                                    <p className=\"info-text2\">&#8358;<CurrencyFormat value={user.price} displayType={'text'} thousandSeparator={true} style={{ marginLeft: \"0%\" }} /></p>\r\n        \r\n                                                                </div>\r\n        \r\n        \r\n        \r\n                                                            </div>\r\n                                                        </div>\r\n        \r\n        \r\n                                                    </Col>\r\n        \r\n                                                    <Col lg=\"9\">\r\n                                                        <div className=\"campaign2\">\r\n                                                            <h3 className=\"content-header\">{user.postContent.user.username}</h3>\r\n                                                            <p className=\"content-header\">{user.postContent.text}</p>\r\n                                                            <div className=\"array-img\">\r\n                                                                {\r\n                                                                    Object.values(user.postContent.imgarray).map((imgs, i) => {\r\n                                                                        return <div className=\"arr\">\r\n                                                                            <div>\r\n                                                                                <img src={imgs.imgurl} onClick={() => handleShow(i)} alt={i + 1} className=\"second-display\" />\r\n                                                                            </div>\r\n        \r\n        \r\n        \r\n        \r\n                                                                            <ImageModal\r\n                                                                                shows={show}\r\n                                                                                onHides={() => setShow(false)}\r\n                                                                                id={ids}\r\n                                                                                user={user}\r\n        \r\n                                                                            />\r\n                                                                        </div>\r\n                                                                    })\r\n                                                                }\r\n                                                            </div>\r\n        \r\n                                                        </div>\r\n                                                    </Col>\r\n        \r\n                                                </Row>\r\n                                            </Container>\r\n                                        ) : \"\"\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        </div>\r\n        \r\n                    </div>\r\n                )\r\n            }\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CampaignInfo\r\n","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Groups\\index.jsx",["326","327","328","329","330"],"import React, { useState, useEffect } from 'react'\r\nimport \"./groups.css\"\r\n\r\nimport fire from \"../../Firebase/firebase\"\r\n// import Spinner from \"../Spinner\"\r\nimport { Table, OverlayTrigger, Popover } from \"react-bootstrap\"\r\nimport Pagination from \"../Pagination\"\r\nimport HeaderNav from '../HeaderNav'\r\n\r\n\r\n\r\n\r\n\r\nfunction Groups() {\r\n    const [groups, setGroups] = useState()\r\n    const [users, setUsers] = useState()\r\n    const [loading, setLoading] = useState(false)\r\n    const [sort, setSort] = useState(false)\r\n    const [searchValue, setSearchValue] = useState('')\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [postPerPage] = useState(15)\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchDatas = async () => {\r\n            setLoading(true);\r\n            var groupRef = await fire.database().ref().child(\"Group\")\r\n            groupRef.on('value', snap => {\r\n                const group = snap.val();\r\n                const groupList = [];\r\n                groupList.push(group)\r\n                setGroups(groupList);\r\n                setLoading(false)\r\n            })\r\n\r\n            var userRef = await fire.database().ref().child(\"Users\")\r\n            userRef.on('value', snap => {\r\n                const user = snap.val();\r\n                const userList = [];\r\n\r\n                for (let m in user) {\r\n                    userList.push(user[m]);\r\n                }\r\n                setUsers(userList);\r\n            })\r\n        }\r\n        fetchDatas()\r\n\r\n\r\n\r\n    }, [])\r\n\r\n    // if (loading) {\r\n    //     return <Spinner />\r\n    // }\r\n\r\n    const indexOfLastPost = currentPage * postPerPage;\r\n    const indexOfFirstPost = indexOfLastPost - postPerPage\r\n    const currentPosts = groups && groups\r\n\r\n    const groupLength = []\r\n    groups && groups.map(group => {\r\n        return groupLength.push(Object.values(group.General).length)\r\n    })\r\n    const mts = groupLength[0]\r\n    const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <HeaderNav />\r\n\r\n            <div className=\"app-div\">\r\n                <div className=\"group-page\">\r\n                    <div className=\"search-div\">\r\n                        <h1> </h1>\r\n                        <div className=\"trigger\">\r\n                            <OverlayTrigger\r\n                                trigger=\"click\"\r\n                                key={\"left\"}\r\n                                placement={\"bottom\"}\r\n                                overlay={\r\n                                    <Popover id={`popover-positioned-left`} className=\"toolspit\">\r\n                                        <Popover.Title as=\"h3\" className=\"inst-header\">Sort by</Popover.Title>\r\n                                        <Popover.Content>\r\n                                            <p className=\"sort\" onClick={() => setSort(true)}>Ascending</p>\r\n                                            <p className=\"sort\" onClick={() => setSort(false)}>Descending</p>\r\n                                        </Popover.Content>\r\n                                    </Popover>\r\n                                }\r\n                            >\r\n                                <p className=\"sort\"><img src=\"https://img.icons8.com/ios-glyphs/24/F07841/sorting-answers.png\" alt=\"\" /> Sort</p>\r\n                            </OverlayTrigger>\r\n                            <input type=\"search\" placeholder=\"Search by Group Name\" className=\"search-inp\" value={searchValue} onChange={(e) => setSearchValue(e.target.value)} />\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <Table responsive>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>No..</th>\r\n                                    <th></th>\r\n                                    <th className=\"gp-name\">Group Name</th>\r\n                                    <th className=\"gp-user\">Admin Name</th>\r\n                                    <th className=\"gp-cate\">Category</th>\r\n                                    <th className=\"gp-likes\">No of Members</th>\r\n                                    <th className=\"gp-date\">Date Created</th>\r\n                                    <th className=\"gp-type\">Access Type</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {\r\n                                    loading ? <div style={{ display: 'flex', flex: 1, justifyContent: 'center', alignItems: 'center' }}><img src=\"https://res.cloudinary.com/doouwbecx/image/upload/v1605480900/25_1_f13z4c.gif\" alt=\"\" /></div> :\r\n                                        (sort ?\r\n                                            (\r\n                                                groups && groups.map(group => {\r\n                                                    return Object.values(group.General).filter(cr => cr.name.toLowerCase().includes(searchValue.toLowerCase()))\r\n                                                        .sort((a, b) => (a.name.localeCompare(b.name))).map((gp, i) => {\r\n                                                            return <tr>\r\n                                                               \r\n                                                                <td>{i + 1}</td>\r\n                                                                <td><img src={gp.dp} alt=\"\" className=\"group-image\" /></td>\r\n                                                                <td >{gp.name}</td>\r\n                                                                <td>{gp.user.username}</td>\r\n                                                                <td>\r\n                                                                    <select name={gp.category} className=\"material-field\">\r\n                                                                        {\r\n                                                                            gp.category && gp.category.map(category => {\r\n                                                                                return <option>{category}</option>\r\n\r\n                                                                            })\r\n                                                                        }\r\n                                                                    </select>\r\n                                                                </td>\r\n                                                                <td className=\"category\">\r\n                                                                    {users && users.map(user => {\r\n                                                                        return user.Profile ?\r\n                                                                        (\r\n                                                                            user.Profile.id === gp.user.id ?\r\n                                                                                user.Group_members ?\r\n\r\n                                                                                    Object.entries(user.Group_members).map(ab => {\r\n                                                                                        return ab[0] === gp.id ? Object.values(ab[1]).length : null\r\n                                                                                    })\r\n\r\n                                                                                    : null\r\n                                                                                : null\r\n                                                                        )\r\n\r\n                                                                        : null\r\n                                                                    })}\r\n                                                                </td>\r\n                                                                <td >{new Date(gp.create_date).toUTCString()}</td>\r\n                                                                <td ><p className={gp.email === 'Private' ? \"danger\" : \"success\"}>{gp.email}</p></td>\r\n                                                            </tr>\r\n                                                        })\r\n                                                })\r\n                                            )\r\n                                            :\r\n                                            (\r\n                                                groups && groups.map(group => {\r\n                                                    return Object.values(group.General).filter(cr => cr.name.toLowerCase().includes(searchValue.toLowerCase())).reverse().map((gp, i) => {\r\n                                                        return <tr>\r\n                                                            <td>{i + 1}</td>\r\n                                                            <td><img src={gp.dp} alt=\"\" className=\"group-image\" /></td>\r\n                                                            <td>{gp.name}</td>\r\n                                                            <td>{gp.user.username}</td>\r\n                                                            <td>\r\n                                                                <select name={gp.category} className=\"material-field\">\r\n                                                                    {\r\n                                                                        gp.category && gp.category.map(category => {\r\n                                                                            return <option>{category}</option>\r\n\r\n                                                                        })\r\n                                                                    }\r\n                                                                </select>\r\n                                                            </td>\r\n                                                            <td className=\"category\">\r\n                                                                {users && users.map(user => {\r\n\r\n                                                                    return user.Profile ?\r\n                                                                        (\r\n                                                                            user.Profile.id === gp.user.id ?\r\n                                                                                user.Group_members ?\r\n\r\n                                                                                    Object.entries(user.Group_members).map(ab => {\r\n                                                                                        return ab[0] === gp.id ? Object.values(ab[1]).length : null\r\n                                                                                    })\r\n\r\n                                                                                    : null\r\n                                                                                : null\r\n                                                                        )\r\n\r\n                                                                        : null\r\n\r\n                                                                })}\r\n                                                            </td>\r\n                                                            <td>{new Date(gp.create_date).toUTCString()}</td>\r\n                                                            <td><p className={gp.email === 'Private' ? \"danger\" : \"success\"}>{gp.email}</p></td>\r\n                                                        </tr>\r\n                                                    })\r\n                                                })\r\n                                            ))\r\n\r\n                                }\r\n                            </tbody>\r\n                        </Table>\r\n                    </div>\r\n                </div >\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Groups\r\n\r\n","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Gists\\index.jsx",["331","332","333","334","335","336","337","338","339"],"import React, { useState, useEffect } from \"react\"\r\nimport \"./gists.css\"\r\n\r\nimport fire, { firestore } from \"../../Firebase/firebase\"\r\nimport { Container, Row, Col } from \"react-bootstrap\"\r\n\r\nimport Pagination from \"../Pagination\"\r\nimport Spinner from \"../Spinner\"\r\nimport Search from \"../Search\"\r\nimport GistModal from \"../GistModal\"\r\nimport CurrencyFormat from 'react-currency-format'\r\nimport ShowMoreText from 'react-show-more-text';\r\nimport HeaderNav from \"../HeaderNav\"\r\nimport LazyLoad from \"react-lazyload\"\r\n\r\n\r\nconst Gists = () => {\r\n  const [gistLength, setGistLength] = useState();\r\n  const [selectedGist, setSelectedGist] = useState(\"Ambrose Alli University\");\r\n  const [schools, setSchools] = useState()\r\n  const [flag, setFlag] = useState()\r\n  const [currentPage, setCurrentPage] = useState(1)\r\n  const [postPerPage, setPostPerPage] = useState(4)\r\n  const [searchValue, setSearchValue] = useState('')\r\n  const [radio, setRadio] = useState('All')\r\n  const [startDate, setStartDate] = useState('')\r\n  const [endDate, setEndDate] = useState('')\r\n  const [search, setSearch] = useState(false)\r\n  const [dateSearch, setDateSearch] = useState(false)\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [gistId, setGistId] = useState('')\r\n  const [schGist, setSchGist] = useState()\r\n  const [users, setUsers] = useState()\r\n\r\n\r\n  const indexOfLastPost = currentPage * postPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - postPerPage\r\n  const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n  const verb = []\r\n  schools && schools.map(sch => {\r\n    return sch.Profile ? (sch.Profile.name === selectedGist ? (sch.Posts ? verb.push(Object.values(sch.Posts)) : undefined) : '') : undefined\r\n  })\r\n\r\n  const executeOnClick = (isExpanded) => {\r\n    console.log(isExpanded);\r\n  }\r\n\r\n  const ppt = []\r\n  schools && schools.map(sch => {\r\n    return sch.Profile ? (sch.Profile.name === selectedGist ? (sch.Posts ? ppt.push(Object.keys(sch.Posts).length) : undefined) : \"\") : undefined\r\n  })\r\n  const tpost = schGist && schGist.length\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    var schoolGistRef = firestore.collection(\"School Gist\").doc(selectedGist).collection(\"Gist\").get()\r\n    schoolGistRef.then(function (querySnapshot) {\r\n      const gistPush = []\r\n      querySnapshot.forEach(function (doc) {\r\n        // doc.data() is never undefined for query doc snapshots\r\n        var snap = doc.data()\r\n\r\n        gistPush.push(snap);\r\n\r\n      });\r\n      setSchGist(gistPush)\r\n      setGistLength(gistPush.length)\r\n    });\r\n  }, [selectedGist])\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    var schoolRef = fire.database().ref().child(\"Schools\")\r\n    schoolRef.on('value', snap => {\r\n      const school = snap.val();\r\n      const schoolList = [];\r\n      for (let m in school) {\r\n        schoolList.push(school[m]);\r\n      }\r\n      setSchools(schoolList)\r\n    })\r\n\r\n    var FlagRef = fire.database().ref().child(\"Flagged Gist\")\r\n    FlagRef.on('value', snap => {\r\n      const flag = snap.val();\r\n      const allFlag = flag.All\r\n      const flagList = [];\r\n      flagList.push(allFlag)\r\n      setFlag(flagList)\r\n    })\r\n\r\n    var userRef = fire.database().ref().child(\"Users\")\r\n    userRef.on('value', snap => {\r\n      const user = snap.val();\r\n      const userList = [];\r\n\r\n      for (let m in user) {\r\n        userList.push(user[m]);\r\n      }\r\n      setUsers(userList);\r\n    })\r\n\r\n\r\n\r\n  }, [])\r\n\r\n\r\n  const sendFlag = []\r\n  flag && flag.map(fs => Object.values(fs).map(fd => sendFlag.push(fd.postid)))\r\n\r\n  const start = Date.parse(startDate)\r\n  const end = Date.parse(endDate)\r\n\r\n  const searchSubmit = () => {\r\n    // return window.location.href=`/search?start=${startDate}&end=${endDate}`\r\n    setDateSearch(true)\r\n  }\r\n\r\n\r\n\r\n  const handleGist = (id) => {\r\n    setModalShow(true)\r\n    setGistId(id)\r\n  }\r\n\r\n  const _onFocus = (e) => {\r\n    e.currentTarget.type = \"date\";\r\n  }\r\n\r\n  const _onBlur = (e) => {\r\n    e.currentTarget.type = \"text\";\r\n  }\r\n\r\n  const resetSubmit = () => {\r\n    setDateSearch(false)\r\n    setStartDate('')\r\n    setEndDate('')\r\n  }\r\n\r\n  const postComment = (gistId) => {\r\n    return users && users.map(user => {\r\n      return user[\"Post Comments\"] ?\r\n        (\r\n          Object.entries(user[\"Post Comments\"]).map(post => {\r\n            return post[0] === gistId ?\r\n              (\r\n                Object.values(post[1]).length\r\n              ) : null\r\n          })\r\n        ) : undefined\r\n    })\r\n\r\n  }\r\n\r\n  const postLikes = (gistId) => {\r\n    return users && users.map(user => {\r\n      return user.PostLikes ?\r\n        (\r\n          Object.entries(user.PostLikes).map(post => {\r\n            return post[0] === gistId ?\r\n              (\r\n                Object.values(post[1]).length\r\n              ) : null\r\n          })\r\n        ) : undefined\r\n    })\r\n\r\n  }\r\n\r\n  const repost = (gistId) => {\r\n    return users && users.map(user => {\r\n      return user.Repost ?\r\n        (\r\n          Object.entries(user.Repost).map(post => {\r\n            return post[0] === gistId ?\r\n              (\r\n                Object.values(post[1]).length\r\n              ) : null\r\n          })\r\n        ) : undefined\r\n    })\r\n\r\n  }\r\n\r\n\r\n  const gistArr = schGist && schGist.filter(cr => cr.user.username.toLowerCase().includes(searchValue.toLowerCase()))\r\n\r\n  const gistDateFilter = schGist && schGist.filter(cr => cr.date >= start && cr.date <= end)\r\n\r\n  return (\r\n    <div>\r\n      <HeaderNav />\r\n\r\n      <div className=\"app-div\">\r\n        <div className=\"gist-page\">\r\n          <Container>\r\n            <Row>\r\n              <Col lg=\"12\">\r\n                <input type=\"search\" placeholder=\" Search by username\" className=\"gist-input\" value={searchValue} onChange={(e) => setSearchValue(e.target.value)} />\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n          <div className=\"gist-cont-div\">\r\n            <select className=\"gist-inst\" value={selectedGist} onChange={(e) => setSelectedGist(e.target.value)}>\r\n              {\r\n                schools && schools.map(sch => {\r\n                  return <option>\r\n                    {sch.Profile ? sch.Profile.name : undefined}\r\n                  </option>\r\n                })\r\n              }\r\n            </select>\r\n\r\n            <p className=\"total-gist\">Total Gists: <CurrencyFormat value={gistLength} displayType={'text'} thousandSeparator={true} /></p>\r\n          </div>\r\n\r\n\r\n          <Container fluid>\r\n            <Row className=\"rowes\">\r\n              <Col lg=\"8\" md=\"8\" xs=\"12\" sm=\"8\">\r\n\r\n                {\r\n                  !dateSearch ?\r\n                    (<div style={{ marginLeft: '-3%' }}>\r\n                      {\r\n                        radio === 'All' ?\r\n                          (\r\n                            schGist ?\r\n                              (\r\n                                <div>\r\n                                  {gistArr.sort((a, b) => b.date - a.date).map(gists => {\r\n                                    return <LazyLoad>\r\n                                      <Container fluid>\r\n                                        <Row>\r\n                                          <Col xs=\"12\" className=\"all-gist\" >\r\n\r\n                                            <div className=\"gimst\">\r\n                                              <div className=\"allgist-div1\" onClick={() => handleGist(gists.postid)}>\r\n                                                <img src={gists.userDp} alt=\"\" className=\"gist-image\" />\r\n                                                <div className=\"allgist-div1-sub\">\r\n                                                  <p className=\"allgist-div1-sub-header\">{gists.user.username}</p>\r\n                                                  <p className=\"allgist-div1-sub-text\">{new Date(gists.date).toDateString()}</p>\r\n                                                </div>\r\n                                              </div>\r\n                                              <div className=\"gimst-div\">\r\n                                                <ShowMoreText\r\n                                                  lines={1}\r\n                                                  more='Show more'\r\n                                                  less='Show less'\r\n                                                  className='content'\r\n                                                  anchorClass='my-anchor-css-class pt'\r\n                                                  onClick={executeOnClick}\r\n                                                  expanded={false}\r\n                                                  width={700}\r\n                                                >\r\n                                                  <p className=\"textss\">{gists.text}</p>\r\n                                                </ShowMoreText>\r\n\r\n\r\n                                              </div>\r\n\r\n                                              <div>\r\n                                                {\r\n                                                  gists.sharedpost ?\r\n                                                    (\r\n                                                      <div className=\"shared\">\r\n                                                        <span style={{ fontSize: \"10px\", color: \"grey\" }}> <img src=\"https://img.icons8.com/material-two-tone/14/000000/retweet.png\" alt=\"\" /> Reposted</span>\r\n                                                        <p>{gists.sharedpost.text}</p>\r\n                                                        <img src={gists.sharedpost.imgarray ? gists.sharedpost.imgarray[0].imgurl : undefined} alt=\"\" className=\"allround-image\" />\r\n                                                      </div>\r\n                                                    ) : undefined\r\n                                                }\r\n                                              </div>\r\n\r\n                                              <div className=\"action\">\r\n                                                <div style={{ display: 'flex', justifyContent: 'flex-start', alignItems: 'center', width: '100px' }}>\r\n                                                  <img src=\"https://img.icons8.com/ios-glyphs/14/000000/chat.png\" alt=\"\" />\r\n                                                  <p className=\"list\">{postComment(gists.postid)} comment</p>\r\n                                                </div>\r\n                                                <div style={{ display: 'flex', justifyContent: 'flex-start', alignItems: 'center', width: '100px' }}>\r\n                                                  <img src=\"https://img.icons8.com/ios-glyphs/14/000000/filled-like.png\" alt=\"\" />\r\n                                                  <p className=\"list\">{postLikes(gists.postid)} like</p>\r\n                                                </div>\r\n                                                <div style={{ display: 'flex', justifyContent: 'flex-start', alignItems: 'center', width: '100px' }}>\r\n                                                  <img src=\"https://img.icons8.com/material-two-tone/14/000000/retweet.png\" alt=\"\" />\r\n                                                  <p className=\"list\">{repost(gists.postid)} Regist</p>\r\n                                                </div>\r\n                                              </div>\r\n                                            </div>\r\n\r\n\r\n\r\n\r\n                                            <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n                                              {\r\n                                                gists.videourl ?\r\n                                                  <video className=\"vmd\" controls>\r\n                                                    <source src={gists.videourl} type=\"video/mp4\" />\r\n                                                  </video>\r\n                                                  : gists.imgarray ? <img src={gists.imgarray[0].imgurl} alt=\"\" className=\"allround-image\" /> : \"\"\r\n                                              }\r\n\r\n                                              {sendFlag.includes(gists.postid) ? <img src=\"https://img.icons8.com/ios-filled/24/FF0000/flag.png\" alt=\"\" /> : \"\"}\r\n                                            </div>\r\n\r\n\r\n                                          </Col>\r\n                                        </Row>\r\n                                        <GistModal\r\n                                          show={modalShow}\r\n                                          onHide={() => setModalShow(false)}\r\n                                          id={gistId}\r\n                                          schools={schools}\r\n                                          schGists={schGist}\r\n                                          flag={sendFlag}\r\n                                          users={users}\r\n                                          selectedGist={selectedGist}\r\n                                        />\r\n\r\n                                      </Container>\r\n                                    </LazyLoad>\r\n                                  })}\r\n                                </div>\r\n                              )\r\n                              : undefined\r\n\r\n                          )\r\n                          :\r\n                          (\r\n                            gistArr.sort((a, b) => b.date - a.date).map(gists => {\r\n                              return sendFlag.includes(gists.postid) ?\r\n                                <LazyLoad>\r\n                                  <Container fluid>\r\n                                    <Row>\r\n                                      <Col xs=\"12\" className=\"all-gist\" >\r\n\r\n                                        <div className=\"gimst\">\r\n                                          <div className=\"allgist-div1\" onClick={() => handleGist(gists.postid)}>\r\n                                            <img src={gists.userDp} alt=\"\" className=\"gist-image\" />\r\n                                            <div className=\"allgist-div1-sub\">\r\n                                              <p className=\"allgist-div1-sub-header\">{gists.user.username}</p>\r\n                                              <p className=\"allgist-div1-sub-text\">{new Date(gists.date).toDateString()}</p>\r\n                                            </div>\r\n                                          </div>\r\n                                          <div className=\"gimst-div\">\r\n                                            <ShowMoreText\r\n                                              lines={1}\r\n                                              more='Show more'\r\n                                              less='Show less'\r\n                                              className='content'\r\n                                              anchorClass='my-anchor-css-class pt'\r\n                                              onClick={executeOnClick}\r\n                                              expanded={false}\r\n                                              width={700}\r\n                                            >\r\n                                              <p className=\"textss\">{gists.text}</p>\r\n                                            </ShowMoreText>\r\n\r\n\r\n                                          </div>\r\n\r\n                                          <div>\r\n                                            {\r\n                                              gists.sharedpost ?\r\n                                                (\r\n                                                  <div className=\"shared\">\r\n                                                    <span style={{ fontSize: \"10px\", color: \"grey\" }}> <img src=\"https://img.icons8.com/material-two-tone/14/000000/retweet.png\" alt=\"\" /> Reposted</span>\r\n                                                    <p>{gists.sharedpost.text}</p>\r\n                                                    <img src={gists.sharedpost.imgarray[0].imgurl} alt=\"\" className=\"allround-image\" />\r\n                                                  </div>\r\n                                                ) : undefined\r\n                                            }\r\n                                          </div>\r\n\r\n                                          <div className=\"action\">\r\n                                            <div style={{ display: 'flex', justifyContent: 'flex-start', alignItems: 'center', width: '100px' }}>\r\n                                              <img src=\"https://img.icons8.com/ios-glyphs/14/000000/chat.png\" alt=\"\" />\r\n                                              <p className=\"list\">{postComment(gists.postid)} comment</p>\r\n                                            </div>\r\n                                            <div style={{ display: 'flex', justifyContent: 'flex-start', alignItems: 'center', width: '100px' }}>\r\n                                              <img src=\"https://img.icons8.com/ios-glyphs/14/000000/filled-like.png\" alt=\"\" />\r\n                                              <p className=\"list\">{postLikes(gists.postid)} like</p>\r\n                                            </div>\r\n                                            <div style={{ display: 'flex', justifyContent: 'flex-start', alignItems: 'center', width: '100px' }}>\r\n                                              <img src=\"https://img.icons8.com/material-two-tone/14/000000/retweet.png\" alt=\"\" />\r\n                                              <p className=\"list\">{repost(gists.postid)} Regist</p>\r\n                                            </div>\r\n                                          </div>\r\n                                        </div>\r\n\r\n\r\n\r\n\r\n                                        <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n                                          {\r\n                                            gists.videourl ?\r\n                                              <video className=\"vmd\" controls>\r\n                                                <source src={gists.videourl} type=\"video/mp4\" />\r\n                                              </video>\r\n                                              : gists.imgarray ? <img src={gists.imgarray[0].imgurl} alt=\"\" className=\"allround-image\" /> : \"\"\r\n                                          }\r\n\r\n                                          {sendFlag.includes(gists.postid) ? <img src=\"https://img.icons8.com/ios-filled/24/FF0000/flag.png\" alt=\"\" /> : \"\"}\r\n                                        </div>\r\n\r\n\r\n                                      </Col>\r\n                                    </Row>\r\n                                    <GistModal\r\n                                      show={modalShow}\r\n                                      onHide={() => setModalShow(false)}\r\n                                      id={gistId}\r\n                                      schools={schools}\r\n                                      schGists={schGist}\r\n                                      users={users}\r\n                                      flag={sendFlag}\r\n                                      selectedGist={selectedGist}\r\n                                    />\r\n\r\n                                  </Container>\r\n                                </LazyLoad>\r\n                                : \"\"\r\n                            })\r\n                          )\r\n                      }\r\n\r\n\r\n                    </div>)\r\n\r\n                    :\r\n\r\n                    (\r\n                      <div style={{ marginLeft: '-3%' }}>\r\n                        {\r\n                          radio === 'All' ?\r\n                            (\r\n                              schGist ?\r\n                                (\r\n                                  <div>\r\n                                    {gistDateFilter.sort((a, b) => b.date - a.date).map(gists => {\r\n                                      return <LazyLoad><Container fluid>\r\n                                        <Row>\r\n                                          <Col xs=\"12\" className=\"all-gist\" >\r\n\r\n                                            <div className=\"gimst\">\r\n                                              <div className=\"allgist-div1\" onClick={() => handleGist(gists.postid)}>\r\n                                                <img src={gists.userDp} alt=\"\" className=\"gist-image\" />\r\n                                                <div className=\"allgist-div1-sub\">\r\n                                                  <p className=\"allgist-div1-sub-header\">{gists.user.username}</p>\r\n                                                  <p className=\"allgist-div1-sub-text\">{new Date(gists.date).toDateString()}</p>\r\n                                                </div>\r\n                                              </div>\r\n                                              <div className=\"gimst-div\">\r\n                                                <ShowMoreText\r\n                                                  lines={1}\r\n                                                  more='Show more'\r\n                                                  less='Show less'\r\n                                                  className='content'\r\n                                                  anchorClass='my-anchor-css-class pt'\r\n                                                  onClick={executeOnClick}\r\n                                                  expanded={false}\r\n                                                  width={700}\r\n                                                >\r\n                                                  <p className=\"textss\">{gists.text}</p>\r\n                                                </ShowMoreText>\r\n\r\n\r\n                                              </div>\r\n\r\n                                              <div>\r\n                                                {\r\n                                                  gists.sharedpost ?\r\n                                                    (\r\n                                                      <div className=\"shared\">\r\n                                                        <span style={{ fontSize: \"10px\", color: \"grey\" }}> <img src=\"https://img.icons8.com/material-two-tone/14/000000/retweet.png\" alt=\"\" /> Reposted</span>\r\n                                                        <p>{gists.sharedpost.text}</p>\r\n                                                        <img src={gists.sharedpost.imgarray[0].imgurl} alt=\"\" className=\"allround-image\" />\r\n                                                      </div>\r\n                                                    ) : undefined\r\n                                                }\r\n                                              </div>\r\n\r\n                                              <div className=\"action\">\r\n                                                <div style={{ display: 'flex', justifyContent: 'flex-start', alignItems: 'center', width: '100px' }}>\r\n                                                  <img src=\"https://img.icons8.com/ios-glyphs/14/000000/chat.png\" alt=\"\" />\r\n                                                  <p className=\"list\">{postComment(gists.postid)} comment</p>\r\n                                                </div>\r\n                                                <div style={{ display: 'flex', justifyContent: 'flex-start', alignItems: 'center', width: '100px' }}>\r\n                                                  <img src=\"https://img.icons8.com/ios-glyphs/14/000000/filled-like.png\" alt=\"\" />\r\n                                                  <p className=\"list\">{postLikes(gists.postid)} like</p>\r\n                                                </div>\r\n                                                <div style={{ display: 'flex', justifyContent: 'flex-start', alignItems: 'center', width: '100px' }}>\r\n                                                  <img src=\"https://img.icons8.com/material-two-tone/14/000000/retweet.png\" alt=\"\" />\r\n                                                  <p className=\"list\">{repost(gists.postid)} Regist</p>\r\n                                                </div>\r\n                                              </div>\r\n                                            </div>\r\n\r\n\r\n\r\n\r\n                                            <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n                                              {\r\n                                                gists.videourl ?\r\n                                                  <video className=\"vmd\" controls>\r\n                                                    <source src={gists.videourl} type=\"video/mp4\" />\r\n                                                  </video>\r\n                                                  : gists.imgarray ? <img src={gists.imgarray[0].imgurl} alt=\"\" className=\"allround-image\" /> : \"\"\r\n                                              }\r\n\r\n                                              {sendFlag.includes(gists.postid) ? <img src=\"https://img.icons8.com/ios-filled/24/FF0000/flag.png\" alt=\"\" /> : \"\"}\r\n                                            </div>\r\n\r\n\r\n                                          </Col>\r\n                                        </Row>\r\n                                        <GistModal\r\n                                          show={modalShow}\r\n                                          onHide={() => setModalShow(false)}\r\n                                          id={gistId}\r\n                                          schools={schools}\r\n                                          schGists={schGist}\r\n                                          flag={sendFlag}\r\n                                          users={users}\r\n                                          selectedGist={selectedGist}\r\n                                        />\r\n\r\n                                      </Container>\r\n                                      </LazyLoad>\r\n                                    })}\r\n                                  </div>\r\n                                )\r\n                                : undefined\r\n\r\n                            ) :\r\n                            (\r\n\r\n                              gistDateFilter.sort((a, b) => b.date - a.date).map(gists => {\r\n                                return sendFlag.includes(gists.postid) ?\r\n                                  <LazyLoad>\r\n                                    <Container fluid>\r\n                                      <Row>\r\n                                        <Col xs=\"12\" className=\"all-gist\" >\r\n\r\n                                          <div className=\"gimst\">\r\n                                            <div className=\"allgist-div1\" onClick={() => handleGist(gists.postid)}>\r\n                                              <img src={gists.userDp} alt=\"\" className=\"gist-image\" />\r\n                                              <div className=\"allgist-div1-sub\">\r\n                                                <p className=\"allgist-div1-sub-header\">{gists.user.username}</p>\r\n                                                <p className=\"allgist-div1-sub-text\">{new Date(gists.date).toDateString()}</p>\r\n                                              </div>\r\n                                            </div>\r\n                                            <div className=\"gimst-div\">\r\n                                              <ShowMoreText\r\n                                                lines={1}\r\n                                                more='Show more'\r\n                                                less='Show less'\r\n                                                className='content'\r\n                                                anchorClass='my-anchor-css-class pt'\r\n                                                onClick={executeOnClick}\r\n                                                expanded={false}\r\n                                                width={700}\r\n                                              >\r\n                                                <p className=\"textss\">{gists.text}</p>\r\n                                              </ShowMoreText>\r\n\r\n\r\n                                            </div>\r\n\r\n                                            <div>\r\n                                              {\r\n                                                gists.sharedpost ?\r\n                                                  (\r\n                                                    <div className=\"shared\">\r\n                                                      <span style={{ fontSize: \"10px\", color: \"grey\" }}> <img src=\"https://img.icons8.com/material-two-tone/14/000000/retweet.png\" alt=\"\" /> Reposted</span>\r\n                                                      <p>{gists.sharedpost.text}</p>\r\n                                                      <img src={gists.sharedpost.imgarray[0].imgurl} alt=\"\" className=\"allround-image\" />\r\n                                                    </div>\r\n                                                  ) : undefined\r\n                                              }\r\n                                            </div>\r\n\r\n                                            <div className=\"action\">\r\n                                              <div style={{ display: 'flex', justifyContent: 'flex-start', alignItems: 'center', width: '100px' }}>\r\n                                                <img src=\"https://img.icons8.com/ios-glyphs/14/000000/chat.png\" alt=\"\" />\r\n                                                <p className=\"list\">{postComment(gists.postid)} comment</p>\r\n                                              </div>\r\n                                              <div style={{ display: 'flex', justifyContent: 'flex-start', alignItems: 'center', width: '100px' }}>\r\n                                                <img src=\"https://img.icons8.com/ios-glyphs/14/000000/filled-like.png\" alt=\"\" />\r\n                                                <p className=\"list\">{postLikes(gists.postid)} like</p>\r\n                                              </div>\r\n                                              <div style={{ display: 'flex', justifyContent: 'flex-start', alignItems: 'center', width: '100px' }}>\r\n                                                <img src=\"https://img.icons8.com/material-two-tone/14/000000/retweet.png\" alt=\"\" />\r\n                                                <p className=\"list\">{repost(gists.postid)} Regist</p>\r\n                                              </div>\r\n                                            </div>\r\n                                          </div>\r\n\r\n\r\n\r\n\r\n                                          <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n                                            {\r\n                                              gists.videourl ?\r\n                                                <video className=\"vmd\" controls>\r\n                                                  <source src={gists.videourl} type=\"video/mp4\" />\r\n                                                </video>\r\n                                                : gists.imgarray ? <img src={gists.imgarray[0].imgurl} alt=\"\" className=\"allround-image\" /> : \"\"\r\n                                            }\r\n\r\n                                            {sendFlag.includes(gists.postid) ? <img src=\"https://img.icons8.com/ios-filled/24/FF0000/flag.png\" alt=\"\" /> : \"\"}\r\n                                          </div>\r\n\r\n\r\n                                        </Col>\r\n                                      </Row>\r\n                                      <GistModal\r\n                                        show={modalShow}\r\n                                        onHide={() => setModalShow(false)}\r\n                                        id={gistId}\r\n                                        schools={schools}\r\n                                        schGists={schGist}\r\n                                        users={users}\r\n                                        flag={sendFlag}\r\n                                        selectedGist={selectedGist}\r\n                                      />\r\n\r\n                                    </Container>\r\n                                  </LazyLoad>\r\n                                  : \"\"\r\n                              })\r\n\r\n                            )\r\n                        }\r\n                      </div>\r\n\r\n                    )\r\n                }\r\n\r\n              </Col>\r\n\r\n              <Col lg=\"4\" md=\"4\" xs=\"12\" sm=\"4\" className=\"filtered\">\r\n                <div className=\"filter-div\">\r\n                  <p className=\"filter-text\"><img src=\"https://img.icons8.com/ios-glyphs/20/F07841/filter.png\" alt=\"\" /> Filter</p>\r\n                </div>\r\n\r\n\r\n                <div>\r\n                  <label>By Status</label><br />\r\n                  <input\r\n                    type=\"radio\"\r\n                    value=\"All\"\r\n                    checked={radio === 'All'}\r\n                    onChange={(e) => setRadio(e.target.value)} /><span className=\"all\">All</span><br />\r\n                  <input\r\n                    type=\"radio\"\r\n                    value=\"Flagged\"\r\n                    checked={radio === 'Flagged'}\r\n                    onChange={(e) => setRadio(e.target.value)} /><span className=\"all\">Flagged</span><br />\r\n                </div>\r\n\r\n                <div className=\"date-div\">\r\n                  <label>By Date</label><br />\r\n                  <input\r\n                    type=\"text\"\r\n                    onFocus={_onFocus}\r\n                    onBlur={_onBlur}\r\n                    id=\"date\"\r\n                    placeholder=\"Start Date\"\r\n                    value={startDate}\r\n                    // checked={radio === 'All'}\r\n                    className=\"date-filter\"\r\n                    onChange={(e) => setStartDate(e.target.value)}\r\n                  />\r\n\r\n                  <input\r\n                    type=\"text\"\r\n                    onFocus={_onFocus}\r\n                    onBlur={_onBlur}\r\n                    placeholder=\"End Date\"\r\n                    value={endDate}\r\n                    className=\"date-filter\"\r\n                    onChange={(e) => setEndDate(e.target.value)} />\r\n                </div>\r\n                <button className=\"btn btns2\" onClick={resetSubmit} > Reset</button>\r\n                <button className=\"btn btns\" onClick={searchSubmit} style={{ marginLeft: \"3px\" }}> Submit</button>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Gists","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\DepartmentUsers\\index.jsx",["340","341"],"import React, { useState, useEffect } from 'react'\r\nimport HeaderNav from \"../HeaderNav\"\r\n\r\nimport {Table} from \"react-bootstrap\"\r\nimport fire from \"../../Firebase/firebase\"\r\n\r\n\r\n\r\nfunction DepartmentUsers(props) {\r\n\r\n    const [schools, setSchools] = useState()\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchData = async () => {\r\n            setLoading(true)\r\n            var schoolRef = await fire.database().ref().child(\"Schools\")\r\n            schoolRef.on('value', snap => {\r\n                const school = snap.val();\r\n                const schoolList = [];\r\n                for (let m in school) {\r\n                    schoolList.push(school[m]);\r\n                }\r\n                setLoading(false)\r\n                setSchools(schoolList)\r\n            })\r\n\r\n        }\r\n        fetchData()\r\n\r\n    }, [])\r\n\r\n    \r\n    const userDetails = (id) => {\r\n        return window.location.href = `/user/${id}`\r\n\r\n    }\r\n\r\n    const schoolName = props.match.params.schoolname\r\n    const departmentName = props.match.params.department\r\n    const facultyName = props.match.params.faculty\r\n\r\n\r\n    const backClick = () => {\r\n        return window.location.href = `/schools/${schoolName}/${facultyName}`\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <HeaderNav />\r\n\r\n            <div className=\"app-div\">\r\n                <p style={{ cursor: 'pointer', width: '150px' }} onClick={() => backClick()}><span><img src=\"https://img.icons8.com/ios-glyphs/24/000000/arrow-pointing-left--v2.png\" /></span> Back</p>\r\n                <h4 className=\"props\">Users</h4>\r\n\r\n                <Table responsive>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>No..</th>\r\n                                <th>Image</th>\r\n                                <th>Users</th>\r\n                                <th>Email</th>\r\n                            </tr>\r\n                        </thead>\r\n                        {\r\n                            loading ?  <div style={{display: 'flex', marginTop: \"2%\", width: '300%', justifyContent: 'center', alignItems: 'center'}}><img src=\"https://res.cloudinary.com/doouwbecx/image/upload/v1605480900/25_1_f13z4c.gif\" alt=\"\" /></div> :\r\n                            (\r\n                                schools && schools.map(school => {\r\n                                    return school.Profile.name === props.match.params.schoolname ?\r\n                                        Object.entries(school.Faculties).map((faculty) => {\r\n                                           return faculty[1].id === props.match.params.faculty ? \r\n                                            (\r\n                                                faculty[1].Departments ?\r\n                                                (\r\n                                                    Object.values(faculty[1].Departments).map((item, i) => {\r\n                                                        return item.id === props.match.params.department ?\r\n                                                        (\r\n                                                            item.Users ? \r\n                                                            (\r\n                                                                Object.entries(item.Users).map((student, i) => {\r\n                                                                    return <tbody>\r\n                                                                             <tr>\r\n                                                                                 <td>{i + 1}</td>\r\n                                                                                 <td><img src={student[1].image} alt=\"\" className=\"user-image\" /></td>\r\n                                                                                 <td><p style={{ fontSize: '15px', cursor: \"pointer\" }} onClick={() => userDetails(student[1].id)}>{student[1].username}</p></td>\r\n                                                                                 <td>{student[1].email}</td>\r\n                                                                             </tr>\r\n                                                                         </tbody>\r\n                                                                })\r\n                                                            )\r\n                                                             : null\r\n                                                        )\r\n                                                         : null\r\n                                                    })\r\n                                                ) \r\n                                                : null\r\n                                            )\r\n                                           : null\r\n                                                \r\n                                        })\r\n                                        : null\r\n                                })\r\n                            )\r\n                        }\r\n                    </Table>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DepartmentUsers\r\n","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Campaign\\index.jsx",["342","343","344","345","346","347","348","349","350","351"],"import React, { useState, useEffect } from 'react'\r\nimport \"./campaign.css\"\r\n\r\nimport { Table, OverlayTrigger, Popover } from \"react-bootstrap\"\r\nimport Spinner from \"../Spinner\"\r\nimport fire from \"../../Firebase/firebase\"\r\nimport Pagination from \"../Pagination\"\r\nimport CurrencyFormat from 'react-currency-format'\r\nimport HeaderNav from '../HeaderNav'\r\n\r\n\r\nfunction Campaign() {\r\n    const [campaign, setCampaign] = useState()\r\n    const [sort, setSort] = useState()\r\n    const [searchValue, setSearchValue] = useState('')\r\n    const [loading, setLoading] = useState()\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [postPerPage] = useState(15)\r\n\r\n\r\n\r\n    const indexOfLastPost = currentPage * postPerPage;\r\n    const indexOfFirstPost = indexOfLastPost - postPerPage\r\n    const currentPosts = campaign && campaign\r\n\r\n\r\n    const mts = campaign && campaign.length\r\n\r\n    const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n\r\n    const price = campaign && campaign.reduce((total, pr) => total = total + parseInt(pr.price, 10), 0)\r\n\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchUsers = async () => {\r\n             setLoading(true);\r\n            var campaignRef = await fire.database().ref().child(\"CAMPAIGN\")\r\n\r\n            campaignRef.on('value', snap => {\r\n                const campaign = snap.val();\r\n                const campaignList = [];\r\n                for (let m in campaign) {\r\n                    campaignList.push(campaign[m]);\r\n                }\r\n                campaignList.map(camp => {\r\n                    if (camp.duration === \"1 Day\") {\r\n                        const currentDate = new Date()\r\n                        const campaignDate = new Date(camp.date + (3600 * 1000 * 24)).toDateString();\r\n                        if (Date.parse(currentDate) <= Date.parse(campaignDate)) {\r\n                            return;\r\n                        } else {\r\n                            campaignRef.child(camp.id).update({\r\n                                \"status\": false\r\n                            })\r\n                        }\r\n\r\n                    } else if (camp.duration === \"1 Week\") {\r\n                        const currentDate = new Date()\r\n                        const campaignDate = new Date(camp.date + (3600 * 1000 * 168)).toDateString();\r\n                        if (Date.parse(currentDate) <= Date.parse(campaignDate)) {\r\n                            return;\r\n                        } else {\r\n                            campaignRef.child(camp.id).update({\r\n                                \"status\": false\r\n                            })\r\n                        }\r\n                    } else {\r\n                        const currentDate = new Date()\r\n                        const campaignDate = new Date(camp.date + (3600 * 1000 * 744)).toDateString()\r\n                        if (Date.parse(currentDate) <= Date.parse(campaignDate)) {\r\n                            return;\r\n                        } else {\r\n                            campaignRef.child(camp.id).update({\r\n                                \"status\": false\r\n                            })\r\n                        }\r\n                    }\r\n                })\r\n                setCampaign(campaignList);\r\n                setLoading(false)\r\n            })\r\n\r\n        }\r\n        fetchUsers()\r\n\r\n\r\n    }, [])\r\n\r\n    // if (loading) {\r\n    //     return <Spinner />\r\n    // }\r\n\r\n    const handleClick = (id) => {\r\n        return window.location.href = `/campaign/${id}`\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <HeaderNav />\r\n\r\n            <div className=\"app-div\">\r\n                <div className=\"users-section\">\r\n                    <div className=\"search-div\">\r\n                        <h1 className=\"amount\">Total Amount: &#8358;<CurrencyFormat value={price} displayType={'text'} thousandSeparator={true}  style={{marginLeft: \"-1%\"}}/></h1>\r\n                        <div className=\"trigger\">\r\n                            <OverlayTrigger\r\n                                trigger=\"click\"\r\n                                key={\"left\"}\r\n                                placement={\"bottom\"}\r\n                                overlay={\r\n                                    <Popover id={`popover-positioned-left`} className=\"toolspit\">\r\n                                        <Popover.Title as=\"h3\" className=\"inst-header\">Sort by</Popover.Title>\r\n                                        <Popover.Content>\r\n                                            <p className=\"sort\" onClick={() => setSort(true)}>Ascending</p>\r\n                                            <p className=\"sort\" onClick={() => setSort(false)}>Descending</p>\r\n                                        </Popover.Content>\r\n                                    </Popover>\r\n                                }\r\n                            >\r\n                                <p className=\"sort\"><img src=\"https://img.icons8.com/ios-glyphs/24/F07841/sorting-answers.png\" alt=\"\" /> Sort</p>\r\n                            </OverlayTrigger>\r\n                            <input type=\"search\" placeholder=\"Search by Admin\" className=\"search-inp\" value={searchValue} onChange={(e) => setSearchValue(e.target.value)} />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <Table responsive>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>No..</th>\r\n                                <th className=\"username\">Admin</th>\r\n                                <th className=\"email\">No of School</th>\r\n                                <th className=\"school\">Price</th>\r\n                                <th className=\"dept\">Date Created</th>\r\n                                <th className=\"status-mat\">Duration</th>\r\n                                <th className=\"gp-type-mat\">Status</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            {\r\n                                loading ?  <div style={{display: 'flex', flex: 1, justifyContent: 'center', alignItems: 'center'}}><img src=\"https://res.cloudinary.com/doouwbecx/image/upload/v1605480900/25_1_f13z4c.gif\" alt=\"\" /></div> :\r\n                                (sort ?\r\n                                    (\r\n                                        campaign && campaign.filter(cr => cr.postContent.user.username.toLowerCase().includes(searchValue.toLowerCase())).sort((a, b) => (a.postContent.user.username.localeCompare(b.postContent.user.username))).map((camp, i) => {\r\n                                            return <tr>\r\n                                                <td>{i + 1}</td>\r\n                                                <td className=\"bus-name\" style={{ cursor: 'pointer' }} onClick={() => handleClick(camp.id)}>{camp.postContent.user.username}</td>\r\n                                                <td className=\"bus-name\">{camp.schools.length}</td>\r\n                                                <td className=\"bus-name\">&#8358;<CurrencyFormat value={camp.price} displayType={'text'} thousandSeparator={true} style={{marginLeft: \"-1%\"}}/></td>\r\n                                                <td className=\"bus-name\">{new Date(camp.date).toUTCString()}</td>\r\n                                                <td className=\"bus-name\">{camp.duration}</td>\r\n                                                <td className=\"bus-name\">{camp.status ? <p className=\"success\">Active</p> : <p className=\"danger\">Expired</p>}</td>\r\n                                            </tr>\r\n                                        })\r\n                                    )\r\n                                    :\r\n                                    (\r\n                                        campaign && campaign.filter(cr => cr.postContent.user.username.toLowerCase().includes(searchValue.toLowerCase())).reverse().map((camp, i) => {\r\n                                            return <tr>\r\n                                                <td>{i + 1}</td>\r\n                                                <td className=\"bus-name\" style={{ cursor: 'pointer' }} onClick={() => handleClick(camp.id)}>{camp.postContent.user.username}</td>\r\n                                                <td className=\"bus-name\">{camp.schools.length}</td>\r\n                                                <td className=\"bus-name\">&#8358;<CurrencyFormat value={camp.price} displayType={'text'} thousandSeparator={true} style={{marginLeft: \"0%\"}}/></td>\r\n                                                <td className=\"bus-name\">{new Date(camp.date).toUTCString()}</td>\r\n                                                <td className=\"bus-name\">{camp.duration}</td>\r\n                                                <td className=\"bus-name\">{camp.status ? <p className=\"success\">Active</p> : <p className=\"danger\">Expired</p>}</td>\r\n                                            </tr>\r\n                                        })\r\n                                    )\r\n                                )\r\n                            }\r\n                        </tbody>\r\n                    </Table>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Campaign\r\n","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\SchoolRoute\\index.jsx",["352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374"],"import React, { useState, useEffect } from 'react'\r\nimport \"./schoolroute.css\"\r\n\r\nimport fire from \"../../Firebase/firebase\"\r\n\r\nimport { Table, Modal } from \"react-bootstrap\"\r\nimport Pagination from \"../Pagination\"\r\nimport Spinner from \"../Spinner\"\r\nimport HeaderNav from '../HeaderNav'\r\n\r\n\r\n\r\nfunction SchoolRoute(props) {\r\n    const [institutions, setInstitutions] = useState();\r\n    const [schools, setSchools] = useState()\r\n    const [roll, setRoll] = useState()\r\n    const [users, setUsers] = useState();\r\n    const [loading, setLoading] = useState(false)\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [postPerPage, setPostPerPage] = useState(10)\r\n    const [searchValue, setSearchValue] = useState('')\r\n    const [sort, setSort] = useState(false)\r\n    const [show, setShow] = useState(false);\r\n    const [faculty, setFaculty] = useState(\r\n        {\r\n            school: [\r\n                {\r\n                    faculty: \"\",\r\n                    department: [\"\"]\r\n                }\r\n            ]\r\n        }\r\n    )\r\n\r\n    var schoolName = props.match.params.schoolname\r\n\r\n\r\n    const dr = faculty.school.map(fac => {\r\n        return fac.department\r\n    })\r\n\r\n\r\n\r\n\r\n    const handleSubmit = () => {\r\n\r\n        const matches = schoolName.match(/\\b(\\w)/g);\r\n        const acrony = matches.join('');\r\n\r\n        var schoolRef = fire.database().ref().child(\"Schools\")\r\n        schoolRef.on('value', snap => {\r\n            const school = snap.val();\r\n            console.log(\"fac\", school)\r\n            \r\n            Object.entries(school).map(a => {\r\n                console.log(\"aaaa\",a)\r\n                if (a[0] === props.match.params.schoolname) {\r\n                    Object.entries(a).map(bb => {\r\n                        Object.entries(bb).map(obj => {\r\n                            Object.entries(obj[1]).map(fac => {\r\n                                return fac[0] === \"Faculties\" ?\r\n                                    (\r\n                                        schoolRef.child(schoolName).child(fac[0]).child(faculty.school[0].faculty).set({\r\n                                            \r\n                                            Departments: true,\r\n                                            id: faculty.school[0].faculty,\r\n                                            school: schoolName,\r\n                                        })\r\n                                    ) : null\r\n                            })\r\n                        })\r\n                    })\r\n                } else {\r\n                    return;\r\n                }\r\n            })\r\n\r\n        })\r\n\r\n\r\n        setFaculty(\r\n            {\r\n                school: [\r\n                    {\r\n                        faculty: \"\",\r\n                        department: [\"\"]\r\n                    }\r\n                ]\r\n            }\r\n        )\r\n\r\n\r\n    }\r\n\r\n    const handleFacultyChange = (e, i) => {\r\n        let temp = { ...faculty }\r\n        temp.school[i][e.target.name] = e.target.value\r\n        setFaculty(temp)\r\n    }\r\n\r\n    const handleDepartmentChange = (e, i, j) => {\r\n        let temp = { ...faculty }\r\n        temp.school[i].department[j] = e.target.value\r\n        setFaculty(temp)\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    const indexOfLastPost = currentPage * postPerPage;\r\n    const indexOfFirstPost = indexOfLastPost - postPerPage\r\n\r\n\r\n\r\n\r\n    const verb = []\r\n    var mts = users && users.map(user => {\r\n        return user.Profile?.institution === props.match.params.schoolname ? (verb.push(user.Profile?.username)) : \"\"\r\n    })\r\n\r\n    const displayItem = verb.length\r\n\r\n    const ppt = []\r\n    var bbs = users && users.map(user => {\r\n        return user.Profile?.institution === props.match.params.schoolname ? (ppt.push(user)) : \"\"\r\n    })\r\n\r\n    const currentPost = ppt && ppt\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchData = async () => {\r\n             setLoading(true)\r\n            var institutionRef = await fire.database().ref().child(\"Institutions\")\r\n            institutionRef.on('value', snap => {\r\n                const institution = snap.val();\r\n                const institutionList = [];\r\n                for (let m in institution) {\r\n                    institutionList.push(institution[m]);\r\n                }\r\n                setInstitutions(institutionList);\r\n                // setLoading(false)\r\n            })\r\n\r\n            var userRef = await fire.database().ref().child(\"Users\")\r\n            userRef.on('value', snap => {\r\n                const user = snap.val();\r\n                const userList = [];\r\n                for (let m in user) {\r\n                    userList.push(user[m]);\r\n                }\r\n                setUsers(userList);\r\n            })\r\n\r\n            var schoolRef = await fire.database().ref().child(\"Schools\")\r\n            schoolRef.on('value', snap => {\r\n                const school = snap.val();\r\n                const schoolList = [];\r\n                for (let m in school) {\r\n                    schoolList.push(school[m]);\r\n                }\r\n                setSchools(schoolList)\r\n                 setLoading(false)\r\n                setRoll(schoolList.length)\r\n            })\r\n\r\n        }\r\n        fetchData()\r\n\r\n    }, [])\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    // if (loading) {\r\n    //     return <Spinner />\r\n    // }\r\n\r\n    const backClick = (id) => {\r\n        return window.location.href = '/schools/'\r\n    }\r\n\r\n    // const userDetails = (id) => {\r\n    //     return window.location.href = `/school/user/${id}`\r\n\r\n    // }\r\n\r\n    const facultyDetails = (id) => {\r\n        return window.location.href = `/schools/${props.match.params.schoolname}/${id}`\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <HeaderNav />\r\n\r\n            <div className=\"app-div\">\r\n                <div className=\"school-page\">\r\n                    <p style={{ cursor: 'pointer', width: '150px'}} onClick={() => backClick()}><span><img src=\"https://img.icons8.com/ios-glyphs/24/000000/arrow-pointing-left--v2.png\" /></span> Back</p>\r\n                    <div style={{ background: 'white', padding: '15px' }}>\r\n                        <div className=\"search-div\">\r\n                            <h4 className=\"props\">Faculties of {props.match.params.schoolname}</h4>\r\n                        </div>\r\n\r\n                        <div className=\"plus\" onClick={handleShow}>\r\n                            <img src=\"https://img.icons8.com/ios-glyphs/50/F07841/plus.png\" alt=\"\" className=\"plus-image\" />\r\n                        </div>\r\n\r\n                        <Modal show={show} onHide={handleClose}>\r\n                            <Modal.Header closeButton>\r\n                                <p className=\"create\">Add Faculty</p>\r\n                            </Modal.Header>\r\n                            <Modal.Body>\r\n\r\n                                <div className=\"label-div\">\r\n                                    {\r\n                                        faculty.school && faculty.school.map((schools, i) => (\r\n                                            <div>\r\n                                                <div key={i} className=\"\">\r\n                                                    <span className=\"labels\">Name of Faculty </span><br />\r\n                                                    <div className=\"fac-input\">\r\n                                                        <input type=\"text\" name='faculty' placeholder='Faculty Name' className=\"form-control cont\"\r\n                                                            onChange={e => handleFacultyChange(e, i)} value={faculty.school[i].faculty}\r\n                                                        />\r\n                                                        \r\n                                                    </div>\r\n\r\n                                                    \r\n                                                </div>\r\n                                            </div>\r\n                                        ))\r\n                                    }\r\n                                </div>\r\n\r\n                                <div className=\"button-div\">\r\n                                    <button className=\"btnss\" type=\"submit\" onClick={() => handleSubmit()} disabled={faculty.school[0].faculty === \"\"}>Add Faculty</button>\r\n                                </div>\r\n                            </Modal.Body>\r\n                        </Modal>\r\n\r\n                        <Table responsive>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>No..</th>\r\n                                    <th>Faculty Name</th>\r\n                                    <th className=\"\">Department</th>\r\n                                    {/* <th className=\"joined\">Date Joined</th> */}\r\n                                </tr>\r\n                            </thead>\r\n                            {\r\n                                loading ?  <div style={{display: 'flex', marginTop: \"2%\", width: '500%', justifyContent: 'center', alignItems: 'center'}}><img src=\"https://res.cloudinary.com/doouwbecx/image/upload/v1605480900/25_1_f13z4c.gif\" alt=\"\" /></div> :\r\n                                (\r\n                                    schools && schools.map(school => {\r\n                                        return school.Profile.name === props.match.params.schoolname ?\r\n                                            school.Faculties ?\r\n                                            (\r\n                                                Object.entries(school.Faculties).map((faculty, i) => {\r\n                                                    return <tbody>\r\n                                                        <tr>\r\n                                                            <td>{i + 1}</td>\r\n                                                            <td style={{ cursor: \"pointer\" }} onClick={() => facultyDetails(faculty[1].id)}>{faculty[1].id}</td>\r\n                                                            <td>{faculty[1].Departments ? Object.values(faculty[1].Departments).length : null}</td>\r\n                                                        </tr>\r\n                                                    </tbody>\r\n                                                })\r\n                                            ) : undefined\r\n                                            : \"\"\r\n                                    })\r\n                                )\r\n                            }\r\n                        </Table>\r\n\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SchoolRoute\r\n","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\NewAdmin\\index.jsx",["375","376","377","378","379"],"import React, { useState, useEffect } from 'react'\r\nimport HeaderNav from '../HeaderNav'\r\nimport \"./newadmin.css\"\r\nimport firebase from \"firebase\"\r\nimport { auth, firestore, secondAuth, storage } from \"../../Firebase/firebase\"\r\n\r\n\r\nfunction NewAdmin() {\r\n    const [fullName, setFullName] = useState(\"\")\r\n    const [email, setEmail] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [phoneNumber, setPhoneNumber] = useState(\"\")\r\n    const [type, setType] = useState(\"\")\r\n    const [file, setFile] = useState([])\r\n    const [imageUrl, setImageUrl] = useState(\"\")\r\n    const [urls, setUrls] = useState(\"\");\r\n    const [progress, setProgress] = useState(0)\r\n\r\n\r\n\r\n\r\n    const createAdmin = (e) => {\r\n\r\n        secondAuth.auth().createUserWithEmailAndPassword(email, password)\r\n            .then((result) => {\r\n                firestore.collection(\"Admin\")\r\n                    .doc()\r\n                    .set({\r\n                        fullName,\r\n                        email,\r\n                        type,\r\n                        phoneNumber,\r\n                        password,\r\n                        image: urls,\r\n                        created_on: firebase.firestore.FieldValue.serverTimestamp()\r\n                    })\r\n\r\n                alert(\"Congratulations, you have successfully created a new admin\")\r\n                setFullName(\"\")\r\n                setEmail(\"\")\r\n                setType(\"\")\r\n                setPhoneNumber(\"\")\r\n                setPassword(\"\")\r\n                setProgress(0)\r\n                setUrls(\"\")\r\n                secondAuth.auth().signOut()\r\n            })\r\n            .catch(err => {\r\n                console.log({ err })\r\n            })\r\n    }\r\n\r\n\r\n\r\n\r\n    const handleChange = (event) => {\r\n\r\n        if (event.target.files[0]) {\r\n            setImageUrl(event.target.files[0])\r\n        }\r\n        const imageUrls = event.target.files[0]\r\n        const imgName = event.target.files[0].name\r\n\r\n        const uploadFile = storage.ref(`profile pictures/${imgName}`).put(imageUrls)\r\n\r\n        uploadFile.on(\r\n            \"state_changed\",\r\n            snapshot => {\r\n                const progres = Math.round(\r\n                    (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n                )\r\n                setProgress(progres)\r\n            },\r\n            error => {\r\n                console.log(error)\r\n            },\r\n            () => {\r\n                storage.ref(\"profile pictures\")\r\n                    .child(imgName)\r\n                    .getDownloadURL()\r\n                    .then(url => {\r\n                        console.log({ url })\r\n                        setUrls(url)\r\n                    })\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <HeaderNav />\r\n            <div className=\"app-div\">\r\n                <div className=\"create\">\r\n                    <form className=\"create-form\">\r\n                        <h2>Create New Admin</h2>\r\n                        <div class=\"wrap\">\r\n                            <div class=\"form-group\">\r\n                                <label className=\"custom-file-upload\">\r\n                                    <input\r\n                                        type=\"file\"\r\n                                        id=\"file\"\r\n                                        onChange={handleChange}\r\n                                    />\r\n                                    <img src=\"https://res.cloudinary.com/doouwbecx/image/upload/v1618006632/Schoolng/Group_oi4rfp.png\" alt=\"\" />\r\n                                </label>\r\n                                <div className=\"progress\">\r\n                                    <div>\r\n                                        <label for=\"file\" className=\"logo-upload\">Profile Uploading progress:</label>\r\n                                        <progress value={progress} max=\"100\" className=\"progressbar\" />\r\n                                    </div>\r\n                                    \r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"create-div\">\r\n                            <label>Full Name</label>\r\n                            <input type=\"text\" value={fullName} onChange={(e) => setFullName(e.target.value)} />\r\n                        </div>\r\n\r\n                        <div className=\"create-div\">\r\n                            <label>Email</label>\r\n                            <input type=\"text\" value={email} onChange={(e) => setEmail(e.target.value)} />\r\n                        </div>\r\n\r\n                        <div className=\"create-div\">\r\n                            <select vlue={type} onChange={(e) => setType(e.target.value)}>\r\n                                <option>Type</option>\r\n                                <option value=\"super\">Super Admin</option>\r\n                                <option value=\"admin\">Normal Admin</option>\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div className=\"create-div\">\r\n                            <label>Phone Number</label>\r\n                            <input type=\"number\" value={phoneNumber} onChange={(e) => setPhoneNumber(e.target.value)} />\r\n                        </div>\r\n\r\n                        <div className=\"create-div\">\r\n                            <label>Create Password</label>\r\n                            <input type=\"text\" value={password} onChange={(e) => setPassword(e.target.value)} />\r\n                        </div>\r\n\r\n                        <div className=\"admin-create\">\r\n                            <button type=\"button\" className=\"but-create\" onClick={() => createAdmin()} disabled={urls === \"\"}>Create Admin</button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewAdmin\r\n","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Admin\\index.jsx",["380","381"],"import React, { useState, useEffect } from 'react'\r\n\r\nimport \"./admin.css\"\r\nimport HeaderNav from \"../HeaderNav\"\r\nimport { firestore, auth } from \"../../Firebase/firebase\"\r\n\r\nimport { Table } from \"react-bootstrap\"\r\n\r\nfunction Admin() {\r\n    const [admin, setAdmin] = useState()\r\n    const [loading, setLoading] = useState()\r\n    const [user, setUser] = useState()\r\n    const [currentUser, setCurrentUser] = useState()\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchAdmins = async () => {\r\n            setLoading(true);\r\n            auth.onAuthStateChanged(user => {\r\n                var adminRef = firestore.collection(\"Admin\").get()\r\n                    .then((querySnapshot) => {\r\n\r\n                        var adminArr = []\r\n                        querySnapshot.forEach((doc) => {\r\n                            adminArr.push(doc.data())\r\n                            setLoading(false)\r\n                        });\r\n                        setAdmin(adminArr)\r\n                        setCurrentUser(user)\r\n                        adminArr?.map(admin => {\r\n                            if (admin.email === user.email) {\r\n                                setUser(admin)\r\n\r\n                            }\r\n                        })\r\n                    });\r\n\r\n            })\r\n        }\r\n        fetchAdmins()\r\n    }, [])\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <HeaderNav />\r\n\r\n            <div className=\"app-div\">\r\n                <div className=\"users-section\">\r\n                    <div className=\"search-div\">\r\n                        <h1 className=\"amount\">Number of Admins: {admin?.length}</h1>\r\n                        {\r\n                            user?.type === \"super\" || currentUser?.email === \"support@schooln.ng\" ?\r\n                                (\r\n                                    <a href=\"/admin/create\" className=\"btn-admin\">Add New Admin</a>\r\n                                )\r\n                                : null\r\n                        }\r\n\r\n                    </div>\r\n\r\n                    <Table responsive>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>No..</th>\r\n                                <th></th>\r\n                                <th className=\"username\">Admin</th>\r\n                                <th className=\"email\">Email Address</th>\r\n                                <th className=\"dept\">Date Added</th>\r\n                                <th className=\"status-mat\">Type</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            {\r\n                                loading ? <div style={{ display: 'flex', flex: 1, justifyContent: 'center', alignItems: 'center' }}><img src=\"https://res.cloudinary.com/doouwbecx/image/upload/v1605480900/25_1_f13z4c.gif\" alt=\"\" /></div> :\r\n\r\n                                    admin && admin.map((ads, i) => {\r\n                                        return <tr>\r\n                                            <td>{i + 1}</td>\r\n                                            <td><img src={ads.image} className=\"admin-image\" alt=\"\" /></td>\r\n                                            <td className=\"bus-name\" >{ads.fullName}</td>\r\n                                            <td className=\"bus-name\">{ads.email}</td>\r\n                                            <td className=\"bus-name\">{ads.created_on.toDate().toDateString()}</td>\r\n                                            <td className=\"bus-name\">{ads.type === \"super\" ? <p className=\"danger\">Super Admin</p> : <p className=\"success\">Admin</p>}</td>\r\n                                        </tr>\r\n                                    })\r\n                            }\r\n                        </tbody>\r\n                    </Table>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Admin\r\n","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Pages\\LogIn\\index.jsx",["382","383","384"],"import React, {useState, useEffect} from \"react\"\r\nimport \"./login.css\"\r\nimport {Form, Button } from \"react-bootstrap\"\r\nimport {auth, firestore} from \"../../Firebase/firebase\"\r\n\r\n\r\nconst Login = () => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [error, setError] = useState(null);\r\n    const [loader, setLoader] = useState(false)\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n    const signInWithEmailAndPasswordHandler = (e, email,password) => {\r\n        e.preventDefault();\r\n        setLoader(true);\r\n        setTimeout(() => {\r\n            console.log(\"loader\")\r\n            setLoader(false);\r\n        }, 5000);\r\n        if (email.includes(\"@schooln.ng\")) {\r\n            auth.signInWithEmailAndPassword(email, password).then(user =>  {\r\n             window.location.href = '/overview'\r\n             }).catch(error => {\r\n                setError(\"Error signing in with password and email!\");\r\n                console.error(\"Error signing in with password and email!\", error);\r\n            })\r\n        }\r\n        else {\r\n            setError(\"The Email You Entered is not Authorized to Login\");\r\n        }\r\n\r\n\r\n  \r\n        \r\n    }\r\n    const handleLogin = (email,password) => {\r\n        setLoader(true);\r\n        setTimeout(() => {\r\n            console.log(\"loader\")\r\n            setLoader(false);\r\n        }, 5000);\r\n        signInWithEmailAndPasswordHandler(email,password)\r\n        \r\n    }\r\n\r\n    const onChangeHandler = (e) => {\r\n        const {name, value} = e.currentTarget;\r\n\r\n        if (name === \"userEmail\") {\r\n            setEmail(value);\r\n        }\r\n        else if (name === 'userPassword') {\r\n            setPassword(value);\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n        <div className=\"login\"> \r\n            <Form className=\"login-div\">\r\n                <div className=\"login-sub-div\">\r\n                <img src=\"https://res.cloudinary.com/doouwbecx/image/upload/v1604742745/Schoolng/cir_l_2_w59sua.png\" alt=\"\" />\r\n                    <h3 className=\"admin-login\">School Admin Login</h3>\r\n                </div>\r\n\r\n                {error !== null && <div className=\"py-4 w-full texts text-center mb-3\">{error}</div>}\r\n                <Form.Group controlId=\"formBasicEmail\">\r\n                    <Form.Label>Email</Form.Label><br/>\r\n                    <Form.Control type=\"email\" name=\"userEmail\" className=\"\" id=\"userEmail\" value={email} placeholder=\"E.g: faruq123@gmail.com\" onChange={(e) => onChangeHandler(e)} />\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"formBasicPassword\">\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control type=\"password\" placeholder=\"Your Password\" id=\"userPassword\" value={password} name=\"userPassword\" onChange={(e) => onChangeHandler(e)} />\r\n                </Form.Group>\r\n               <div className=\"login-btn-div\">\r\n\r\n                     {\r\n                        loader ? (<img src=\"https://res.cloudinary.com/doouwbecx/image/upload/v1605480900/25_1_f13z4c.gif\" alt=\"\" />)\r\n                            :\r\n                            <Button type=\"submit\" className=\"login-btn\" onClick = {(event) => { signInWithEmailAndPasswordHandler(event, email, password)}}>\r\n                                    Login\r\n                            </Button>\r\n                } \r\n               </div>\r\n\r\n            </Form>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n\r\n\r\n\r\n","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Faculty\\index.jsx",["385","386","387","388","389"],"import React, { useState, useEffect } from 'react'\r\nimport HeaderNav from '../HeaderNav'\r\nimport { Table, Modal } from \"react-bootstrap\"\r\n\r\nimport fire from \"../../Firebase/firebase\"\r\n\r\nfunction Faculty(props) {\r\n    const [schools, setSchools] = useState()\r\n    const [show, setShow] = useState(false);\r\n    const [inputValue, setInputValue] = useState(\"\")\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchData = async () => {\r\n            setLoading(true)\r\n            var schoolRef = await fire.database().ref().child(\"Schools\")\r\n            schoolRef.on('value', snap => {\r\n                const school = snap.val();\r\n                const schoolList = [];\r\n                for (let m in school) {\r\n                    schoolList.push(school[m]);\r\n                }\r\n                setLoading(false)\r\n                setSchools(schoolList)\r\n            })\r\n\r\n        }\r\n        fetchData()\r\n\r\n    }, [])\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n\r\n\r\n\r\n\r\n    var schoolName = props.match.params.schoolname\r\n\r\n    const handleSubmit = () => {\r\n        var schoolRef = fire.database().ref().child(\"Schools\")\r\n        schoolRef.once('value', snap => {\r\n            const school = snap.val();\r\n            Object.entries(school).map(a => {\r\n                if (a[0] === props.match.params.schoolname) {\r\n                    Object.entries(a).map(bb => {\r\n                        Object.entries(bb).map(obj => {\r\n                            Object.entries(obj[1]).map(fac => {\r\n                                return fac[0] === \"Faculties\" ?\r\n                                    (\r\n                                        Object.entries(fac[1]).map(ab => {\r\n\r\n                                            return ab[1].id === props.match.params.faculty ?\r\n                                                (\r\n                                                    schoolRef.child(schoolName).child(fac[0]).child(props.match.params.faculty).child(\"Departments\").child(inputValue).set({\r\n                                                        id: inputValue,\r\n                                                        schools: {\r\n                                                            id: props.match.params.faculty,\r\n                                                            school: schoolName\r\n                                                        }\r\n                                                    })\r\n                                                ) : null\r\n\r\n                                        })\r\n                                    ) : null\r\n                            })\r\n                        })\r\n                    })\r\n                } else {\r\n                    return;\r\n                }\r\n            })\r\n\r\n        })\r\n\r\n\r\n        setInputValue(\"\")\r\n\r\n\r\n    }\r\n\r\n    const deptUsers = (user) => {\r\n        return window.location.href = `/schools/${schoolName}/${props.match.params.faculty}/${user}`\r\n    }\r\n\r\n    const backClick = () => {\r\n        return window.location.href = `/schools/${schoolName}`\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <HeaderNav />\r\n            <div className=\"app-div\">\r\n                <div className=\"school-page\">\r\n                <p style={{ cursor: 'pointer', width: '150px'}} onClick={() => backClick()}><span><img src=\"https://img.icons8.com/ios-glyphs/24/000000/arrow-pointing-left--v2.png\" /></span> Back</p>\r\n                    <h4 className=\"props\">Departments in {props.match.params.faculty}</h4>\r\n                    <div className=\"plus\" onClick={handleShow}>\r\n                        <img src=\"https://img.icons8.com/ios-glyphs/50/F07841/plus.png\" alt=\"\" className=\"plus-image\" />\r\n                    </div>\r\n\r\n                    <Modal show={show} onHide={handleClose}>\r\n                        <Modal.Header closeButton>\r\n                            <p className=\"create\">Add Department</p>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n\r\n\r\n                            <div className=\"label-div\">\r\n                                {\r\n                                    <div>\r\n                                        <div className=\"\">\r\n                                            <div >\r\n                                                <span className=\"dep-labels\">Add Department </span><br />\r\n                                                <div className=\"dep-input\">\r\n                                                    <input type=\"text\" name='department' placeholder='Department' className=\"form-control dep\"\r\n                                                        onChange={e => setInputValue(e.target.value)}\r\n                                                        value={inputValue}\r\n                                                    />\r\n\r\n                                                </div>\r\n\r\n                                            </div>\r\n\r\n                                        </div>\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n\r\n                            <div className=\"button-div\">\r\n                                <button className=\"btnss\" type=\"submit\" onClick={() => handleSubmit()} disabled={inputValue === \"\"}>Add Department</button>\r\n                            </div>\r\n                        </Modal.Body>\r\n                    </Modal>\r\n\r\n\r\n                    <Table responsive>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>No..</th>\r\n                                <th>Departments Name</th>\r\n                                <th>Users</th>\r\n                            </tr>\r\n                        </thead>\r\n                        {\r\n                            loading ?  <div style={{display: 'flex', marginTop: \"2%\", width: '500%', justifyContent: 'center', alignItems: 'center'}}><img src=\"https://res.cloudinary.com/doouwbecx/image/upload/v1605480900/25_1_f13z4c.gif\" alt=\"\" /></div>:\r\n                            (\r\n                                schools && schools.map(school => {\r\n                                    return school.Profile.name === props.match.params.schoolname ?\r\n                                        Object.entries(school.Faculties).map((faculty) => {\r\n                                            return faculty[1].id === props.match.params.faculty ?\r\n                                                faculty[1].Departments ? Object.values(faculty[1].Departments).map((item, i) => {\r\n                                                    return <tbody>\r\n                                                        <tr>\r\n                                                            <td>{i + 1}</td>\r\n                                                            <td style={{cursor: \"pointer\"}} onClick={() => deptUsers(item.id)}>{item.id}</td>\r\n                                                            <td >{item.Users ? Object.entries(item.Users).length : 0}</td>\r\n                                                        </tr>\r\n                                                    </tbody>\r\n\r\n                                                }) : null\r\n\r\n                                                : null\r\n                                        })\r\n                                        : null\r\n                                })\r\n                            )\r\n                        }\r\n                    </Table>\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Faculty\r\n","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Pages\\Dashboard\\index.jsx",["390","391","392"],"import React, {useState, useContext} from \"react\"\r\nimport HeaderNav from \"../../Components/HeaderNav\"\r\nimport {UserContext} from \"../../Provider/UserProvider\"\r\nimport Overview from \"../../Components/Overview\"\r\nimport Users from \"../../Components/Users\"\r\nimport \"./dashboard.css\"\r\n\r\nimport {Spinner} from \"react-bootstrap\"\r\n\r\n\r\nconst Dashboard = (props) => {\r\n    const user = useContext(UserContext);\r\n\r\n   \r\n    if (user === null) {\r\n        return <Spinner animation=\"border\" variant=\"primary\" />\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"sideNav-component\">\r\n            <HeaderNav />\r\n\r\n            <div className=\"app-div\">\r\n               \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard;","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Notification\\index.jsx",[],"C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Pagination\\index.jsx",[],"C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Peers\\index.jsx",["393","394","395","396","397"],"import React, {useState} from \"react\"\r\nimport \"./peers.css\"\r\n\r\nimport {Table} from \"react-bootstrap\"\r\n\r\nimport Pagination from \"../Pagination\"\r\n\r\n\r\nconst Peers = ({users}) => {\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [postPerPage, setPostPerPage] = useState(10)\r\n\r\n    var mts = users.Peers ? Object.values(users.Peers).length : undefined\r\n\r\n    \r\n    const indexOfLastPost = currentPage * postPerPage;\r\n    const indexOfFirstPost = indexOfLastPost - postPerPage\r\n    const currentPosts = users.Peers && Object.values(users.Peers)\r\n\r\n    const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n    const userDetails = (id) => {\r\n        return window.location.href = `/user/${id}`\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"peer\">\r\n\r\n            {\r\n                users.Peers ? (\r\n                    <>\r\n                        <div>\r\n                            <p>My Peers</p>\r\n                        </div>\r\n\r\n                        <Table responsive>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>No..</th>\r\n                                    <th></th>\r\n                                    <th>User Name</th>\r\n                                    <th>School</th>\r\n                                    <th>Department</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {currentPosts.map((peer, i) => {\r\n                                            return <tr>\r\n                                                <td>{i + 1}</td>\r\n                                                <td><img src={peer.user.image} alt=\"\" className=\"peer-image\" /></td>\r\n                                                <td style={{cursor:'pointer'}} onClick={() => userDetails(peer.user.id)}>{peer.user.username}</td>\r\n                                                <td>{peer.user.institution}</td>\r\n                                                <td>{peer.user.dept}</td>\r\n                                            </tr>\r\n                                        })\r\n                                    }\r\n                            </tbody>\r\n                        </Table>\r\n                    </>\r\n                ) : <p style={{textAlign: 'center'}}>You Have No Peers</p>\r\n            }\r\n\r\n                \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Peers","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\AllGist\\index.jsx",["398","399","400","401","402","403","404","405","406","407","408","409"],"import React, { useState, useEffect } from \"react\"\r\nimport \"./allgist.css\"\r\n\r\nimport fire, { firestore } from \"../../Firebase/firebase\"\r\nimport { Container, Row, Col } from \"react-bootstrap\"\r\nimport Pagination from \"../Pagination\"\r\nimport ShowMoreText from \"react-show-more-text\"\r\nimport GistModal from \"../GistModal\"\r\n\r\n\r\nconst AllGist = ({ users }) => {\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [postPerPage] = useState(3)\r\n    const [modalShow, setModalShow] = useState(false);\r\n    const [gistId, setGistId] = useState('');\r\n    const [flag, setFlag] = useState()\r\n\r\n\r\n    useEffect(() => {\r\n        var FlagRef = fire.database().ref().child(\"Flagged Gist\")\r\n        FlagRef.on('value', snap => {\r\n            const flag = snap.val();\r\n            const allFlag = flag.All\r\n            const flagList = [];\r\n            flagList.push(allFlag)\r\n            setFlag(flagList)\r\n        })\r\n\r\n\r\n\r\n    }, [])\r\n\r\n\r\n    const sendFlag = []\r\n    flag && flag.map(fs => Object.values(fs).map(fd => sendFlag.push(fd.postid)))\r\n\r\n\r\n\r\n    var mts = users.Posts ? Object.values(users.Posts).length : undefined\r\n\r\n    const currentPosts = users.Posts && Object.values(users.Posts)\r\n\r\n    const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n    const executeOnClick = (isExpanded) => {\r\n        console.log(isExpanded);\r\n    }\r\n\r\n    const handleGist = (id) => {\r\n        setModalShow(true)\r\n        setGistId(id)\r\n    }\r\n\r\n    const postComment = (id) => {\r\n        if (users[\"Post Comments\"]) {\r\n            return Object.entries(users[\"Post Comments\"]).map(ab => {\r\n                if (ab[0]) {\r\n                    if (ab[0] === id) {\r\n                        const bb = Object.values(ab[1]).length\r\n                        return bb\r\n                    } else if (!ab[0].includes(id)) {\r\n                        return null\r\n                    }    \r\n                } else {\r\n                    return 0\r\n                }\r\n\r\n            })\r\n        } else {\r\n            return 0\r\n        }\r\n    }\r\n\r\n    const postLikes = (id) => {\r\n        if (users.PostLikes) {\r\n            return Object.entries(users.PostLikes).map(ab => {\r\n                if (ab[0]) {\r\n                    if (ab[0] === id) {\r\n                        const bb = Object.values(ab[1]).length\r\n                        return bb\r\n                    }\r\n                    else if (!ab[0].includes(id)) {\r\n                        return null\r\n                    }\r\n                } else {\r\n                    return 0\r\n                }\r\n\r\n            })\r\n        } else {\r\n            return 0\r\n        }\r\n    }\r\n\r\n    const repost = (id) => {\r\n        if (users.Repost) {\r\n            return Object.entries(users.Repost).map(ab => {\r\n                if (ab[0]) {\r\n                    if (ab[0] === id) {\r\n                        const bb = Object.values(ab[1]).length\r\n                        return bb\r\n                    }\r\n                    else if (!ab[0].includes(id)) {\r\n                        return null\r\n                    }\r\n\r\n                } else {\r\n                    return 0\r\n                }\r\n            })\r\n        } else {\r\n            return 0;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"gest\">\r\n            {\r\n                users.Posts ? (\r\n                    <div>\r\n\r\n                        {\r\n                            currentPosts.sort((a,b) => b.date - a.date).map(pt => {\r\n                                return <Container fluid>\r\n                                    <Row>\r\n                                        <Col xs=\"12\">\r\n                                            <div className=\"allgist\">\r\n\r\n                                                <div className=\"gimst\">\r\n                                                    <div className=\"allgist-div1\" onClick={() => handleGist(pt.postid)}>\r\n                                                        <img src={pt.userDp} alt=\"\" className=\"gist-image\" />\r\n                                                        <div className=\"allgist-div1-sub\">\r\n                                                            <p className=\"allgist-div1-sub-header\">{pt.user.institution}</p>\r\n                                                            <p className=\"allgist-div1-sub-text\">Posted by {pt.user.username}, {new Date(pt.date).toDateString()}</p>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className=\"gimst-div\">\r\n                                                        <ShowMoreText\r\n                                                            lines={1}\r\n                                                            more='Show more'\r\n                                                            less='Show less'\r\n                                                            className='content'\r\n                                                            anchorClass='my-anchor-css-class pt'\r\n                                                            onClick={executeOnClick}\r\n                                                            expanded={false}\r\n                                                            width={700}\r\n                                                        >\r\n                                                            <p className=\"textss\">{pt.text}</p>\r\n                                                        </ShowMoreText>\r\n                                                    </div>\r\n\r\n                                                    <div className=\"action\">\r\n                                                        <div style={{ display: 'flex', justifyContent: 'flex-start', alignItems: 'center', width: '100px' }}>\r\n                                                            <img src=\"https://img.icons8.com/ios-glyphs/14/000000/chat.png\" alt=\"\" />\r\n                                                            <p className=\"list\">{postComment(pt.postid)} comment</p>\r\n                                                        </div>\r\n                                                        <div style={{ display: 'flex', justifyContent: 'flex-start', alignItems: 'center', width: '100px' }}>\r\n                                                            <img src=\"https://img.icons8.com/ios-glyphs/14/000000/filled-like.png\" alt=\"\" />\r\n                                                            <p className=\"list\">{postLikes(pt.postid)} like</p>\r\n                                                        </div>\r\n                                                        <div style={{ display: 'flex', justifyContent: 'flex-start', alignItems: 'center', width: '100px' }}>\r\n                                                            <img src=\"https://img.icons8.com/material-two-tone/14/000000/retweet.png\" alt=\"\" />\r\n                                                            <p className=\"list\">{repost(pt.postid)} Regist</p>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n\r\n\r\n\r\n\r\n                                                {/* <div>\r\n                                                    <img src={pt.userDp} alt=\"\" className=\"allround-image\" />\r\n                                                </div> */}\r\n                                                <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\r\n                                                    {\r\n                                                        pt.videourl ?\r\n                                                            <video className=\"vmd\" controls>\r\n                                                                <source src={pt.videourl} type=\"video/mp4\" />\r\n                                                            </video>\r\n                                                            : pt.imgarray ? <img src={pt.imgarray[0].imgurl} alt=\"\" className=\"allround-image\" /> : \"\"\r\n                                                    }\r\n\r\n                                                    {sendFlag.includes(pt.postid) ? <img src=\"https://img.icons8.com/ios-filled/24/FF0000/flag.png\" alt=\"\" /> : \"\"}\r\n                                                </div>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                    {/* <GistModal\r\n                                        show={modalShow}\r\n                                        onHide={() => setModalShow(false)}\r\n                                        id={gistId}\r\n                                        schools={pt.user.institution}\r\n                                        // flag={sendFlag}\r\n                                        selectedGist={pt.user.institution}\r\n                                      /> */}\r\n\r\n                                </Container>\r\n\r\n                            }\r\n                            )\r\n\r\n                        }\r\n\r\n                    </div>\r\n\r\n                )\r\n\r\n\r\n                    : <p style={{ textAlign: 'center' }}>You Have No Gist</p>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AllGist","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\PeerRequest\\index.jsx",["410","411","412","413","414"],"import React, {useState} from 'react'\r\n\r\nimport {Table} from \"react-bootstrap\"\r\n\r\nimport Pagination from \"../Pagination\"\r\n\r\nfunction PeerRequest({users}) {\r\n\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [postPerPage, setPostPerPage] = useState(10)\r\n\r\n    var mts = users.Peerrequest ? Object.values(users.Peerrequest).length : undefined\r\n\r\n    \r\n    const indexOfLastPost = currentPage * postPerPage;\r\n    const indexOfFirstPost = indexOfLastPost - postPerPage\r\n    const currentPosts = users[\"Peer request\"] && Object.values(users[\"Peer request\"])\r\n\r\n    const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"peer\">\r\n\r\n        {\r\n            users.Peers ? (\r\n                <>\r\n                    <div>\r\n                        <p>Peer Request</p>\r\n                    </div>\r\n\r\n                    <Table responsive>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>No..</th>\r\n                                <th></th>\r\n                                <th>User Name</th>\r\n                                <th>School</th>\r\n                                <th>Department</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {currentPosts && currentPosts.map((peer, i) => {\r\n                                        return <tr>\r\n                                            <td>{i + 1}</td>\r\n                                            <td><img src={peer.user.image} alt=\"\" className=\"peer-image\" /></td>\r\n                                            <td>{peer.user.username}</td>\r\n                                            <td>{peer.user.institution}</td>\r\n                                            <td>{peer.user.dept}</td>\r\n                                        </tr>\r\n                                    })\r\n                                }\r\n                        </tbody>\r\n                    </Table>\r\n                </>\r\n            ) : <p style={{textAlign: 'center'}}>You Have No Peers</p>\r\n        }\r\n\r\n            \r\n            \r\n    </div>\r\n    )\r\n}\r\n\r\nexport default PeerRequest\r\n","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\GistModal\\index.jsx",[],"C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Business\\index.jsx",["415","416","417","418"],"import React, {useState} from 'react'\r\nimport \"./business.css\"\r\n\r\nimport {Table} from \"react-bootstrap\"\r\nimport Pagination from \"../Pagination\"\r\n\r\nfunction Business({users}) {\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [postPerPage] = useState(3)\r\n\r\n\r\n    var mts = users.Business ? Object.values(users.Business).length : undefined\r\n\r\n    const indexOfLastPost = currentPage * postPerPage;\r\n    const indexOfFirstPost = indexOfLastPost - postPerPage\r\n    const currentPosts = users.Business && Object.values(users.Business)\r\n\r\n    const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"business\">\r\n           { users.Business ? (\r\n               <>\r\n                        <p>My Business</p>\r\n\r\n                        <Table responsive>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>No..</th>\r\n                                    <th></th>\r\n                                    <th>Name</th>\r\n                                    <th>Category</th>\r\n                                    <th>Phone No</th>\r\n                                    <th>Date Created</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {\r\n                                    \r\n                                    currentPosts.map((bus, i) => {\r\n                                            return <tr>\r\n                                                <td>{i + 1}</td>\r\n                                                <td><img src={bus.dp} alt=\"\" className=\"peergroup-image\" /></td>\r\n                                                <td>{bus.name}</td>\r\n                                                <td>{bus.category}</td>\r\n                                                <td>{bus.phone}</td>\r\n                                                <td>{new Date(bus.create_date).toDateString()}</td>\r\n                                            </tr>\r\n                                         })\r\n                                   \r\n                                }\r\n                            </tbody>\r\n                        </Table>\r\n                    </>\r\n             ) : <p style={{textAlign: 'center'}}>You Have No Business</p>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Business\r\n","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\PeerGroup\\index.jsx",["419","420","421","422","423","424"],"import React, {useState} from \"react\"\r\nimport \"./peergroup.css\"\r\n\r\n\r\nimport {Table} from \"react-bootstrap\"\r\n\r\nimport Pagination from \"../Pagination\"\r\n\r\n\r\n\r\n\r\nconst PeerGroup = ({users}) => {\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [postPerPage, setPostPerPage] = useState(3)\r\n\r\n    var mts = users.Group ? Object.values(users.Group).length : undefined\r\n\r\n    const indexOfLastPost = currentPage * postPerPage;\r\n    const indexOfFirstPost = indexOfLastPost - postPerPage\r\n    const currentPosts = users.Group && Object.values(users.Group)\r\n\r\n    const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n    const myGroup = []\r\n    const testing = users.MyGroup ? Object.values(users.MyGroup).map(my => myGroup.push(my.id)) : \"\"\r\n\r\n    return (\r\n        <div className=\"grops\">\r\n            {  users.Group ? (\r\n            <>\r\n                    <div>\r\n                        <p>Groups</p>\r\n                    </div>\r\n\r\n                    <Table responsive>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>No..</th>\r\n                                <th></th>\r\n                                <th>Group Name</th>\r\n                                <th>Role</th>\r\n                                <th>Date Joined</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                \r\n                                currentPosts.map((grp, i) => {\r\n                                        // const valued = myGroup[i]\r\n                                        return <tr>\r\n                                            <td>{i + 1}</td>\r\n                                            <td><img src={grp.dp} alt=\"\" className=\"peergroup-image\" /></td>\r\n                                            <td>{grp.name}</td>\r\n                                            {myGroup.includes(grp.id) ?  <td>Admin</td> : <td>Member</td>}\r\n                                            <td>{new Date(grp.create_date).toDateString()}</td>\r\n                                        </tr>\r\n                                    })\r\n                            }\r\n                        </tbody>\r\n                    </Table>\r\n             </>) : <p style={{textAlign: 'center'}}>You Have No Group</p>\r\n}\r\n        </div>\r\n    )\r\n}\r\nexport default PeerGroup","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\ImageModal\\index.jsx",["425","426"],"import React, { useState } from 'react'\r\nimport { Modal, Button } from \"react-bootstrap\"\r\n\r\n\r\n\r\nfunction ImageModal({ shows, onHides, id, user }) {\r\n    return (\r\n        <div>\r\n            <Modal show={shows} onHide={onHides} aria-labelledby=\"contained-modal-title-vcenter\" centered animation={false} size=\"lg\">\r\n                <Modal.Header closeButton id=\"contained-modal-title-vcenter\" onClick={onHides}>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {\r\n                        Object.values(user.postContent.imgarray).map((imgs, i) => i === id ? <img src={imgs.imgurl} alt={i} className=\"modal-img-display\" /> : \"\")\r\n                    }\r\n\r\n                </Modal.Body>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageModal\r\n","C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\assest\\icons\\index.js",[],"C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Base\\BaseMarkUp.jsx",[],"C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Base\\Footer.jsx",[],"C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Base\\Header.jsx",[],"C:\\Users\\ArinzeOgbonna\\Documents\\Work\\new-dashboard\\src\\Components\\Base\\Navigation.jsx",[],{"ruleId":"427","replacedBy":"428"},{"ruleId":"429","replacedBy":"430"},{"ruleId":"431","severity":1,"message":"432","line":1,"column":38,"nodeType":"433","messageId":"434","endLine":1,"endColumn":48},{"ruleId":"431","severity":1,"message":"435","line":4,"column":10,"nodeType":"433","messageId":"434","endLine":4,"endColumn":21},{"ruleId":"431","severity":1,"message":"436","line":6,"column":8,"nodeType":"433","messageId":"434","endLine":6,"endColumn":12},{"ruleId":"431","severity":1,"message":"437","line":7,"column":8,"nodeType":"433","messageId":"434","endLine":7,"endColumn":15},{"ruleId":"431","severity":1,"message":"438","line":8,"column":8,"nodeType":"433","messageId":"434","endLine":8,"endColumn":17},{"ruleId":"431","severity":1,"message":"439","line":10,"column":8,"nodeType":"433","messageId":"434","endLine":10,"endColumn":17},{"ruleId":"431","severity":1,"message":"440","line":37,"column":50,"nodeType":"433","messageId":"434","endLine":37,"endColumn":58},{"ruleId":"431","severity":1,"message":"441","line":6,"column":10,"nodeType":"433","messageId":"434","endLine":6,"endColumn":19},{"ruleId":"431","severity":1,"message":"442","line":3,"column":10,"nodeType":"433","messageId":"434","endLine":3,"endColumn":13},{"ruleId":"431","severity":1,"message":"437","line":3,"column":28,"nodeType":"433","messageId":"434","endLine":3,"endColumn":35},{"ruleId":"431","severity":1,"message":"443","line":19,"column":12,"nodeType":"433","messageId":"434","endLine":19,"endColumn":19},{"ruleId":"431","severity":1,"message":"444","line":19,"column":21,"nodeType":"433","messageId":"434","endLine":19,"endColumn":31},{"ruleId":"431","severity":1,"message":"445","line":31,"column":17,"nodeType":"433","messageId":"434","endLine":31,"endColumn":25},{"ruleId":"446","severity":1,"message":"447","line":39,"column":41,"nodeType":"448","messageId":"449","endLine":39,"endColumn":43},{"ruleId":"431","severity":1,"message":"450","line":61,"column":11,"nodeType":"433","messageId":"434","endLine":61,"endColumn":22},{"ruleId":"431","severity":1,"message":"451","line":6,"column":8,"nodeType":"433","messageId":"434","endLine":6,"endColumn":18},{"ruleId":"431","severity":1,"message":"452","line":8,"column":10,"nodeType":"433","messageId":"434","endLine":8,"endColumn":19},{"ruleId":"431","severity":1,"message":"453","line":8,"column":21,"nodeType":"433","messageId":"434","endLine":8,"endColumn":24},{"ruleId":"431","severity":1,"message":"454","line":8,"column":26,"nodeType":"433","messageId":"434","endLine":8,"endColumn":29},{"ruleId":"431","severity":1,"message":"455","line":18,"column":25,"nodeType":"433","messageId":"434","endLine":18,"endColumn":39},{"ruleId":"431","severity":1,"message":"456","line":52,"column":11,"nodeType":"433","messageId":"434","endLine":52,"endColumn":27},{"ruleId":"431","severity":1,"message":"457","line":53,"column":11,"nodeType":"433","messageId":"434","endLine":53,"endColumn":23},{"ruleId":"431","severity":1,"message":"458","line":57,"column":11,"nodeType":"433","messageId":"434","endLine":57,"endColumn":19},{"ruleId":"431","severity":1,"message":"451","line":6,"column":8,"nodeType":"433","messageId":"434","endLine":6,"endColumn":18},{"ruleId":"431","severity":1,"message":"437","line":7,"column":8,"nodeType":"433","messageId":"434","endLine":7,"endColumn":15},{"ruleId":"431","severity":1,"message":"459","line":14,"column":12,"nodeType":"433","messageId":"434","endLine":14,"endColumn":17},{"ruleId":"431","severity":1,"message":"460","line":14,"column":19,"nodeType":"433","messageId":"434","endLine":14,"endColumn":27},{"ruleId":"431","severity":1,"message":"455","line":21,"column":25,"nodeType":"433","messageId":"434","endLine":21,"endColumn":39},{"ruleId":"431","severity":1,"message":"456","line":56,"column":11,"nodeType":"433","messageId":"434","endLine":56,"endColumn":27},{"ruleId":"431","severity":1,"message":"458","line":68,"column":11,"nodeType":"433","messageId":"434","endLine":68,"endColumn":19},{"ruleId":"431","severity":1,"message":"461","line":77,"column":11,"nodeType":"433","messageId":"434","endLine":77,"endColumn":13},{"ruleId":"431","severity":1,"message":"462","line":79,"column":11,"nodeType":"433","messageId":"434","endLine":79,"endColumn":22},{"ruleId":"431","severity":1,"message":"463","line":1,"column":38,"nodeType":"433","messageId":"434","endLine":1,"endColumn":45},{"ruleId":"431","severity":1,"message":"451","line":9,"column":8,"nodeType":"433","messageId":"434","endLine":9,"endColumn":18},{"ruleId":"431","severity":1,"message":"437","line":10,"column":8,"nodeType":"433","messageId":"434","endLine":10,"endColumn":15},{"ruleId":"431","severity":1,"message":"464","line":11,"column":35,"nodeType":"433","messageId":"434","endLine":11,"endColumn":41},{"ruleId":"431","severity":1,"message":"455","line":21,"column":25,"nodeType":"433","messageId":"434","endLine":21,"endColumn":39},{"ruleId":"431","severity":1,"message":"456","line":53,"column":11,"nodeType":"433","messageId":"434","endLine":53,"endColumn":27},{"ruleId":"431","severity":1,"message":"458","line":57,"column":11,"nodeType":"433","messageId":"434","endLine":57,"endColumn":19},{"ruleId":"431","severity":1,"message":"465","line":3,"column":10,"nodeType":"433","messageId":"434","endLine":3,"endColumn":17},{"ruleId":"431","severity":1,"message":"437","line":6,"column":10,"nodeType":"433","messageId":"434","endLine":6,"endColumn":17},{"ruleId":"431","severity":1,"message":"464","line":6,"column":58,"nodeType":"433","messageId":"434","endLine":6,"endColumn":64},{"ruleId":"431","severity":1,"message":"451","line":7,"column":8,"nodeType":"433","messageId":"434","endLine":7,"endColumn":18},{"ruleId":"431","severity":1,"message":"466","line":16,"column":12,"nodeType":"433","messageId":"434","endLine":16,"endColumn":24},{"ruleId":"431","severity":1,"message":"443","line":17,"column":12,"nodeType":"433","messageId":"434","endLine":17,"endColumn":19},{"ruleId":"431","severity":1,"message":"444","line":17,"column":21,"nodeType":"433","messageId":"434","endLine":17,"endColumn":31},{"ruleId":"431","severity":1,"message":"455","line":19,"column":25,"nodeType":"433","messageId":"434","endLine":19,"endColumn":39},{"ruleId":"431","severity":1,"message":"467","line":36,"column":12,"nodeType":"433","messageId":"434","endLine":36,"endColumn":20},{"ruleId":"431","severity":1,"message":"456","line":56,"column":11,"nodeType":"433","messageId":"434","endLine":56,"endColumn":27},{"ruleId":"431","severity":1,"message":"457","line":57,"column":11,"nodeType":"433","messageId":"434","endLine":57,"endColumn":23},{"ruleId":"431","severity":1,"message":"458","line":59,"column":11,"nodeType":"433","messageId":"434","endLine":59,"endColumn":19},{"ruleId":"431","severity":1,"message":"468","line":103,"column":9,"nodeType":"433","messageId":"434","endLine":103,"endColumn":12},{"ruleId":"431","severity":1,"message":"469","line":106,"column":11,"nodeType":"433","messageId":"434","endLine":106,"endColumn":13},{"ruleId":"470","severity":1,"message":"471","line":171,"column":13,"nodeType":"433","messageId":"472","endLine":171,"endColumn":22},{"ruleId":"470","severity":1,"message":"471","line":178,"column":13,"nodeType":"433","messageId":"472","endLine":178,"endColumn":22},{"ruleId":"446","severity":1,"message":"473","line":181,"column":42,"nodeType":"448","messageId":"474","endLine":181,"endColumn":44},{"ruleId":"446","severity":1,"message":"447","line":188,"column":21,"nodeType":"475","messageId":"476","endLine":188,"endColumn":28},{"ruleId":"431","severity":1,"message":"477","line":11,"column":12,"nodeType":"433","messageId":"434","endLine":11,"endColumn":24},{"ruleId":"431","severity":1,"message":"478","line":11,"column":26,"nodeType":"433","messageId":"434","endLine":11,"endColumn":41},{"ruleId":"446","severity":1,"message":"447","line":47,"column":32,"nodeType":"448","messageId":"449","endLine":47,"endColumn":34},{"ruleId":"479","severity":1,"message":"480","line":100,"column":81,"nodeType":"481","endLine":100,"endColumn":147},{"ruleId":"479","severity":1,"message":"480","line":104,"column":81,"nodeType":"481","endLine":104,"endColumn":154},{"ruleId":"479","severity":1,"message":"480","line":108,"column":81,"nodeType":"481","endLine":108,"endColumn":157},{"ruleId":"479","severity":1,"message":"480","line":119,"column":106,"nodeType":"481","endLine":119,"endColumn":172},{"ruleId":"431","severity":1,"message":"453","line":5,"column":10,"nodeType":"433","messageId":"434","endLine":5,"endColumn":13},{"ruleId":"431","severity":1,"message":"454","line":5,"column":15,"nodeType":"433","messageId":"434","endLine":5,"endColumn":18},{"ruleId":"431","severity":1,"message":"452","line":5,"column":20,"nodeType":"433","messageId":"434","endLine":5,"endColumn":29},{"ruleId":"431","severity":1,"message":"482","line":5,"column":31,"nodeType":"433","messageId":"434","endLine":5,"endColumn":36},{"ruleId":"431","severity":1,"message":"483","line":5,"column":38,"nodeType":"433","messageId":"434","endLine":5,"endColumn":52},{"ruleId":"431","severity":1,"message":"484","line":5,"column":54,"nodeType":"433","messageId":"434","endLine":5,"endColumn":61},{"ruleId":"431","severity":1,"message":"464","line":5,"column":63,"nodeType":"433","messageId":"434","endLine":5,"endColumn":69},{"ruleId":"431","severity":1,"message":"451","line":7,"column":8,"nodeType":"433","messageId":"434","endLine":7,"endColumn":18},{"ruleId":"431","severity":1,"message":"437","line":8,"column":8,"nodeType":"433","messageId":"434","endLine":8,"endColumn":15},{"ruleId":"431","severity":1,"message":"485","line":9,"column":10,"nodeType":"433","messageId":"434","endLine":9,"endColumn":23},{"ruleId":"431","severity":1,"message":"486","line":9,"column":25,"nodeType":"433","messageId":"434","endLine":9,"endColumn":29},{"ruleId":"431","severity":1,"message":"487","line":9,"column":31,"nodeType":"433","messageId":"434","endLine":9,"endColumn":34},{"ruleId":"431","severity":1,"message":"488","line":10,"column":8,"nodeType":"433","messageId":"434","endLine":10,"endColumn":22},{"ruleId":"431","severity":1,"message":"439","line":11,"column":8,"nodeType":"433","messageId":"434","endLine":11,"endColumn":17},{"ruleId":"431","severity":1,"message":"489","line":20,"column":12,"nodeType":"433","messageId":"434","endLine":20,"endColumn":17},{"ruleId":"431","severity":1,"message":"490","line":22,"column":12,"nodeType":"433","messageId":"434","endLine":22,"endColumn":16},{"ruleId":"431","severity":1,"message":"491","line":22,"column":18,"nodeType":"433","messageId":"434","endLine":22,"endColumn":25},{"ruleId":"431","severity":1,"message":"492","line":24,"column":12,"nodeType":"433","messageId":"434","endLine":24,"endColumn":21},{"ruleId":"431","severity":1,"message":"493","line":24,"column":23,"nodeType":"433","messageId":"434","endLine":24,"endColumn":35},{"ruleId":"431","severity":1,"message":"494","line":26,"column":27,"nodeType":"433","messageId":"434","endLine":26,"endColumn":43},{"ruleId":"431","severity":1,"message":"443","line":27,"column":12,"nodeType":"433","messageId":"434","endLine":27,"endColumn":19},{"ruleId":"431","severity":1,"message":"455","line":29,"column":25,"nodeType":"433","messageId":"434","endLine":29,"endColumn":39},{"ruleId":"431","severity":1,"message":"495","line":30,"column":12,"nodeType":"433","messageId":"434","endLine":30,"endColumn":16},{"ruleId":"431","severity":1,"message":"496","line":30,"column":18,"nodeType":"433","messageId":"434","endLine":30,"endColumn":25},{"ruleId":"431","severity":1,"message":"497","line":31,"column":12,"nodeType":"433","messageId":"434","endLine":31,"endColumn":20},{"ruleId":"431","severity":1,"message":"498","line":33,"column":12,"nodeType":"433","messageId":"434","endLine":33,"endColumn":16},{"ruleId":"431","severity":1,"message":"499","line":34,"column":12,"nodeType":"433","messageId":"434","endLine":34,"endColumn":21},{"ruleId":"470","severity":1,"message":"500","line":121,"column":17,"nodeType":"433","messageId":"472","endLine":121,"endColumn":25},{"ruleId":"431","severity":1,"message":"468","line":169,"column":9,"nodeType":"433","messageId":"434","endLine":169,"endColumn":12},{"ruleId":"431","severity":1,"message":"456","line":172,"column":11,"nodeType":"433","messageId":"434","endLine":172,"endColumn":27},{"ruleId":"431","severity":1,"message":"457","line":173,"column":11,"nodeType":"433","messageId":"434","endLine":173,"endColumn":23},{"ruleId":"431","severity":1,"message":"458","line":176,"column":11,"nodeType":"433","messageId":"434","endLine":176,"endColumn":19},{"ruleId":"431","severity":1,"message":"501","line":224,"column":21,"nodeType":"433","messageId":"434","endLine":224,"endColumn":23},{"ruleId":"431","severity":1,"message":"502","line":250,"column":9,"nodeType":"433","messageId":"434","endLine":250,"endColumn":19},{"ruleId":"431","severity":1,"message":"503","line":252,"column":9,"nodeType":"433","messageId":"434","endLine":252,"endColumn":23},{"ruleId":"431","severity":1,"message":"504","line":254,"column":9,"nodeType":"433","messageId":"434","endLine":254,"endColumn":19},{"ruleId":"431","severity":1,"message":"505","line":256,"column":9,"nodeType":"433","messageId":"434","endLine":256,"endColumn":14},{"ruleId":"431","severity":1,"message":"506","line":262,"column":11,"nodeType":"433","messageId":"434","endLine":262,"endColumn":18},{"ruleId":"446","severity":1,"message":"447","line":262,"column":141,"nodeType":"448","messageId":"449","endLine":262,"endColumn":143},{"ruleId":"431","severity":1,"message":"507","line":271,"column":11,"nodeType":"433","messageId":"434","endLine":271,"endColumn":21},{"ruleId":"431","severity":1,"message":"508","line":295,"column":11,"nodeType":"433","messageId":"434","endLine":295,"endColumn":24},{"ruleId":"431","severity":1,"message":"509","line":309,"column":11,"nodeType":"433","messageId":"434","endLine":309,"endColumn":24},{"ruleId":"431","severity":1,"message":"510","line":325,"column":11,"nodeType":"433","messageId":"434","endLine":325,"endColumn":20},{"ruleId":"431","severity":1,"message":"437","line":5,"column":8,"nodeType":"433","messageId":"434","endLine":5,"endColumn":15},{"ruleId":"431","severity":1,"message":"451","line":7,"column":8,"nodeType":"433","messageId":"434","endLine":7,"endColumn":18},{"ruleId":"431","severity":1,"message":"511","line":20,"column":12,"nodeType":"433","messageId":"434","endLine":20,"endColumn":25},{"ruleId":"431","severity":1,"message":"468","line":23,"column":9,"nodeType":"433","messageId":"434","endLine":23,"endColumn":12},{"ruleId":"431","severity":1,"message":"456","line":49,"column":11,"nodeType":"433","messageId":"434","endLine":49,"endColumn":27},{"ruleId":"431","severity":1,"message":"457","line":50,"column":11,"nodeType":"433","messageId":"434","endLine":50,"endColumn":23},{"ruleId":"431","severity":1,"message":"458","line":53,"column":11,"nodeType":"433","messageId":"434","endLine":53,"endColumn":19},{"ruleId":"431","severity":1,"message":"512","line":58,"column":11,"nodeType":"433","messageId":"434","endLine":58,"endColumn":25},{"ruleId":"513","severity":1,"message":"514","line":153,"column":81,"nodeType":"481","messageId":"515","endLine":153,"endColumn":152,"fix":"516"},{"ruleId":"513","severity":1,"message":"514","line":186,"column":81,"nodeType":"481","messageId":"515","endLine":186,"endColumn":152,"fix":"517"},{"ruleId":"513","severity":1,"message":"514","line":220,"column":85,"nodeType":"481","messageId":"515","endLine":220,"endColumn":156,"fix":"518"},{"ruleId":"431","severity":1,"message":"519","line":5,"column":42,"nodeType":"433","messageId":"434","endLine":5,"endColumn":47},{"ruleId":"431","severity":1,"message":"464","line":5,"column":49,"nodeType":"433","messageId":"434","endLine":5,"endColumn":55},{"ruleId":"431","severity":1,"message":"520","line":13,"column":8,"nodeType":"433","messageId":"434","endLine":13,"endColumn":20},{"ruleId":"431","severity":1,"message":"437","line":15,"column":8,"nodeType":"433","messageId":"434","endLine":15,"endColumn":15},{"ruleId":"431","severity":1,"message":"521","line":28,"column":12,"nodeType":"433","messageId":"434","endLine":28,"endColumn":16},{"ruleId":"431","severity":1,"message":"522","line":29,"column":18,"nodeType":"433","messageId":"434","endLine":29,"endColumn":25},{"ruleId":"431","severity":1,"message":"523","line":30,"column":12,"nodeType":"433","messageId":"434","endLine":30,"endColumn":21},{"ruleId":"431","severity":1,"message":"524","line":30,"column":23,"nodeType":"433","messageId":"434","endLine":30,"endColumn":35},{"ruleId":"431","severity":1,"message":"525","line":32,"column":11,"nodeType":"433","messageId":"434","endLine":32,"endColumn":22},{"ruleId":"431","severity":1,"message":"526","line":70,"column":11,"nodeType":"433","messageId":"434","endLine":70,"endColumn":19},{"ruleId":"431","severity":1,"message":"527","line":71,"column":15,"nodeType":"433","messageId":"434","endLine":71,"endColumn":24},{"ruleId":"479","severity":1,"message":"480","line":124,"column":104,"nodeType":"481","endLine":124,"endColumn":189},{"ruleId":"431","severity":1,"message":"519","line":4,"column":31,"nodeType":"433","messageId":"434","endLine":4,"endColumn":36},{"ruleId":"431","severity":1,"message":"464","line":4,"column":38,"nodeType":"433","messageId":"434","endLine":4,"endColumn":44},{"ruleId":"431","severity":1,"message":"437","line":8,"column":8,"nodeType":"433","messageId":"434","endLine":8,"endColumn":15},{"ruleId":"431","severity":1,"message":"525","line":18,"column":11,"nodeType":"433","messageId":"434","endLine":18,"endColumn":22},{"ruleId":"431","severity":1,"message":"451","line":7,"column":8,"nodeType":"433","messageId":"434","endLine":7,"endColumn":18},{"ruleId":"431","severity":1,"message":"456","line":58,"column":11,"nodeType":"433","messageId":"434","endLine":58,"endColumn":27},{"ruleId":"431","severity":1,"message":"457","line":59,"column":11,"nodeType":"433","messageId":"434","endLine":59,"endColumn":23},{"ruleId":"431","severity":1,"message":"468","line":65,"column":11,"nodeType":"433","messageId":"434","endLine":65,"endColumn":14},{"ruleId":"431","severity":1,"message":"458","line":66,"column":11,"nodeType":"433","messageId":"434","endLine":66,"endColumn":19},{"ruleId":"431","severity":1,"message":"451","line":7,"column":8,"nodeType":"433","messageId":"434","endLine":7,"endColumn":18},{"ruleId":"431","severity":1,"message":"437","line":8,"column":8,"nodeType":"433","messageId":"434","endLine":8,"endColumn":15},{"ruleId":"431","severity":1,"message":"528","line":9,"column":8,"nodeType":"433","messageId":"434","endLine":9,"endColumn":14},{"ruleId":"431","severity":1,"message":"455","line":23,"column":23,"nodeType":"433","messageId":"434","endLine":23,"endColumn":37},{"ruleId":"431","severity":1,"message":"529","line":28,"column":10,"nodeType":"433","messageId":"434","endLine":28,"endColumn":16},{"ruleId":"431","severity":1,"message":"530","line":28,"column":18,"nodeType":"433","messageId":"434","endLine":28,"endColumn":27},{"ruleId":"431","severity":1,"message":"456","line":37,"column":9,"nodeType":"433","messageId":"434","endLine":37,"endColumn":25},{"ruleId":"431","severity":1,"message":"458","line":38,"column":9,"nodeType":"433","messageId":"434","endLine":38,"endColumn":17},{"ruleId":"431","severity":1,"message":"531","line":53,"column":9,"nodeType":"433","messageId":"434","endLine":53,"endColumn":14},{"ruleId":"431","severity":1,"message":"532","line":41,"column":11,"nodeType":"433","messageId":"434","endLine":41,"endColumn":25},{"ruleId":"479","severity":1,"message":"480","line":55,"column":100,"nodeType":"481","endLine":55,"endColumn":185},{"ruleId":"431","severity":1,"message":"437","line":5,"column":8,"nodeType":"433","messageId":"434","endLine":5,"endColumn":15},{"ruleId":"431","severity":1,"message":"451","line":7,"column":8,"nodeType":"433","messageId":"434","endLine":7,"endColumn":18},{"ruleId":"431","severity":1,"message":"456","line":23,"column":11,"nodeType":"433","messageId":"434","endLine":23,"endColumn":27},{"ruleId":"431","severity":1,"message":"457","line":24,"column":11,"nodeType":"433","messageId":"434","endLine":24,"endColumn":23},{"ruleId":"431","severity":1,"message":"468","line":27,"column":11,"nodeType":"433","messageId":"434","endLine":27,"endColumn":14},{"ruleId":"431","severity":1,"message":"458","line":29,"column":11,"nodeType":"433","messageId":"434","endLine":29,"endColumn":19},{"ruleId":"446","severity":1,"message":"473","line":49,"column":39,"nodeType":"448","messageId":"474","endLine":49,"endColumn":41},{"ruleId":"446","severity":1,"message":"447","line":54,"column":29,"nodeType":"475","messageId":"476","endLine":54,"endColumn":36},{"ruleId":"446","severity":1,"message":"447","line":65,"column":29,"nodeType":"475","messageId":"476","endLine":65,"endColumn":36},{"ruleId":"446","severity":1,"message":"447","line":75,"column":29,"nodeType":"475","messageId":"476","endLine":75,"endColumn":36},{"ruleId":"431","severity":1,"message":"451","line":7,"column":8,"nodeType":"433","messageId":"434","endLine":7,"endColumn":18},{"ruleId":"431","severity":1,"message":"437","line":8,"column":8,"nodeType":"433","messageId":"434","endLine":8,"endColumn":15},{"ruleId":"431","severity":1,"message":"466","line":14,"column":12,"nodeType":"433","messageId":"434","endLine":14,"endColumn":24},{"ruleId":"431","severity":1,"message":"498","line":16,"column":12,"nodeType":"433","messageId":"434","endLine":16,"endColumn":16},{"ruleId":"431","severity":1,"message":"533","line":19,"column":25,"nodeType":"433","messageId":"434","endLine":19,"endColumn":39},{"ruleId":"431","severity":1,"message":"455","line":20,"column":25,"nodeType":"433","messageId":"434","endLine":20,"endColumn":39},{"ruleId":"431","severity":1,"message":"534","line":21,"column":12,"nodeType":"433","messageId":"434","endLine":21,"endColumn":23},{"ruleId":"431","severity":1,"message":"535","line":21,"column":25,"nodeType":"433","messageId":"434","endLine":21,"endColumn":39},{"ruleId":"431","severity":1,"message":"495","line":22,"column":12,"nodeType":"433","messageId":"434","endLine":22,"endColumn":16},{"ruleId":"431","severity":1,"message":"496","line":22,"column":18,"nodeType":"433","messageId":"434","endLine":22,"endColumn":25},{"ruleId":"431","severity":1,"message":"469","line":38,"column":11,"nodeType":"433","messageId":"434","endLine":38,"endColumn":13},{"ruleId":"431","severity":1,"message":"536","line":48,"column":15,"nodeType":"433","messageId":"434","endLine":48,"endColumn":21},{"ruleId":"446","severity":1,"message":"473","line":55,"column":42,"nodeType":"448","messageId":"474","endLine":55,"endColumn":44},{"ruleId":"446","severity":1,"message":"447","line":58,"column":46,"nodeType":"448","messageId":"449","endLine":58,"endColumn":48},{"ruleId":"446","severity":1,"message":"447","line":59,"column":52,"nodeType":"448","messageId":"449","endLine":59,"endColumn":54},{"ruleId":"446","severity":1,"message":"447","line":74,"column":21,"nodeType":"475","messageId":"476","endLine":74,"endColumn":28},{"ruleId":"431","severity":1,"message":"537","line":101,"column":11,"nodeType":"433","messageId":"434","endLine":101,"endColumn":33},{"ruleId":"431","severity":1,"message":"456","line":112,"column":11,"nodeType":"433","messageId":"434","endLine":112,"endColumn":27},{"ruleId":"431","severity":1,"message":"468","line":118,"column":9,"nodeType":"433","messageId":"434","endLine":118,"endColumn":12},{"ruleId":"431","severity":1,"message":"538","line":122,"column":11,"nodeType":"433","messageId":"434","endLine":122,"endColumn":22},{"ruleId":"431","severity":1,"message":"539","line":125,"column":9,"nodeType":"433","messageId":"434","endLine":125,"endColumn":12},{"ruleId":"431","severity":1,"message":"462","line":129,"column":11,"nodeType":"433","messageId":"434","endLine":129,"endColumn":22},{"ruleId":"479","severity":1,"message":"480","line":201,"column":103,"nodeType":"481","endLine":201,"endColumn":188},{"ruleId":"431","severity":1,"message":"540","line":1,"column":27,"nodeType":"433","messageId":"434","endLine":1,"endColumn":36},{"ruleId":"431","severity":1,"message":"541","line":5,"column":10,"nodeType":"433","messageId":"434","endLine":5,"endColumn":14},{"ruleId":"431","severity":1,"message":"542","line":14,"column":12,"nodeType":"433","messageId":"434","endLine":14,"endColumn":16},{"ruleId":"431","severity":1,"message":"543","line":14,"column":18,"nodeType":"433","messageId":"434","endLine":14,"endColumn":25},{"ruleId":"431","severity":1,"message":"467","line":15,"column":12,"nodeType":"433","messageId":"434","endLine":15,"endColumn":20},{"ruleId":"431","severity":1,"message":"445","line":21,"column":21,"nodeType":"433","messageId":"434","endLine":21,"endColumn":29},{"ruleId":"446","severity":1,"message":"447","line":31,"column":45,"nodeType":"448","messageId":"449","endLine":31,"endColumn":47},{"ruleId":"431","severity":1,"message":"540","line":1,"column":26,"nodeType":"433","messageId":"434","endLine":1,"endColumn":35},{"ruleId":"431","severity":1,"message":"544","line":4,"column":15,"nodeType":"433","messageId":"434","endLine":4,"endColumn":24},{"ruleId":"431","severity":1,"message":"545","line":42,"column":11,"nodeType":"433","messageId":"434","endLine":42,"endColumn":22},{"ruleId":"446","severity":1,"message":"473","line":46,"column":42,"nodeType":"448","messageId":"474","endLine":46,"endColumn":44},{"ruleId":"446","severity":1,"message":"447","line":48,"column":46,"nodeType":"448","messageId":"449","endLine":48,"endColumn":48},{"ruleId":"446","severity":1,"message":"447","line":49,"column":52,"nodeType":"448","messageId":"449","endLine":49,"endColumn":54},{"ruleId":"446","severity":1,"message":"447","line":72,"column":21,"nodeType":"475","messageId":"476","endLine":72,"endColumn":28},{"ruleId":"479","severity":1,"message":"480","line":97,"column":99,"nodeType":"481","endLine":97,"endColumn":184},{"ruleId":"431","severity":1,"message":"546","line":1,"column":16,"nodeType":"433","messageId":"434","endLine":1,"endColumn":24},{"ruleId":"431","severity":1,"message":"547","line":4,"column":8,"nodeType":"433","messageId":"434","endLine":4,"endColumn":16},{"ruleId":"431","severity":1,"message":"548","line":5,"column":8,"nodeType":"433","messageId":"434","endLine":5,"endColumn":13},{"ruleId":"431","severity":1,"message":"451","line":6,"column":8,"nodeType":"433","messageId":"434","endLine":6,"endColumn":18},{"ruleId":"431","severity":1,"message":"455","line":11,"column":25,"nodeType":"433","messageId":"434","endLine":11,"endColumn":39},{"ruleId":"431","severity":1,"message":"468","line":13,"column":9,"nodeType":"433","messageId":"434","endLine":13,"endColumn":12},{"ruleId":"431","severity":1,"message":"456","line":17,"column":11,"nodeType":"433","messageId":"434","endLine":17,"endColumn":27},{"ruleId":"431","severity":1,"message":"458","line":20,"column":11,"nodeType":"433","messageId":"434","endLine":20,"endColumn":19},{"ruleId":"431","severity":1,"message":"544","line":4,"column":16,"nodeType":"433","messageId":"434","endLine":4,"endColumn":25},{"ruleId":"431","severity":1,"message":"451","line":6,"column":8,"nodeType":"433","messageId":"434","endLine":6,"endColumn":18},{"ruleId":"431","severity":1,"message":"549","line":8,"column":8,"nodeType":"433","messageId":"434","endLine":8,"endColumn":17},{"ruleId":"431","severity":1,"message":"550","line":12,"column":12,"nodeType":"433","messageId":"434","endLine":12,"endColumn":23},{"ruleId":"431","severity":1,"message":"551","line":13,"column":12,"nodeType":"433","messageId":"434","endLine":13,"endColumn":23},{"ruleId":"431","severity":1,"message":"552","line":14,"column":12,"nodeType":"433","messageId":"434","endLine":14,"endColumn":21},{"ruleId":"431","severity":1,"message":"553","line":15,"column":12,"nodeType":"433","messageId":"434","endLine":15,"endColumn":18},{"ruleId":"431","severity":1,"message":"468","line":39,"column":9,"nodeType":"433","messageId":"434","endLine":39,"endColumn":12},{"ruleId":"431","severity":1,"message":"458","line":43,"column":11,"nodeType":"433","messageId":"434","endLine":43,"endColumn":19},{"ruleId":"446","severity":1,"message":"473","line":56,"column":66,"nodeType":"448","messageId":"474","endLine":56,"endColumn":68},{"ruleId":"446","severity":1,"message":"473","line":76,"column":59,"nodeType":"448","messageId":"474","endLine":76,"endColumn":61},{"ruleId":"446","severity":1,"message":"473","line":97,"column":56,"nodeType":"448","messageId":"474","endLine":97,"endColumn":58},{"ruleId":"431","severity":1,"message":"451","line":5,"column":8,"nodeType":"433","messageId":"434","endLine":5,"endColumn":18},{"ruleId":"431","severity":1,"message":"455","line":10,"column":25,"nodeType":"433","messageId":"434","endLine":10,"endColumn":39},{"ruleId":"431","severity":1,"message":"468","line":12,"column":9,"nodeType":"433","messageId":"434","endLine":12,"endColumn":12},{"ruleId":"431","severity":1,"message":"456","line":16,"column":11,"nodeType":"433","messageId":"434","endLine":16,"endColumn":27},{"ruleId":"431","severity":1,"message":"458","line":19,"column":11,"nodeType":"433","messageId":"434","endLine":19,"endColumn":19},{"ruleId":"431","severity":1,"message":"451","line":5,"column":8,"nodeType":"433","messageId":"434","endLine":5,"endColumn":18},{"ruleId":"431","severity":1,"message":"468","line":12,"column":9,"nodeType":"433","messageId":"434","endLine":12,"endColumn":12},{"ruleId":"431","severity":1,"message":"456","line":15,"column":11,"nodeType":"433","messageId":"434","endLine":15,"endColumn":27},{"ruleId":"431","severity":1,"message":"458","line":18,"column":11,"nodeType":"433","messageId":"434","endLine":18,"endColumn":19},{"ruleId":"431","severity":1,"message":"451","line":7,"column":8,"nodeType":"433","messageId":"434","endLine":7,"endColumn":18},{"ruleId":"431","severity":1,"message":"455","line":14,"column":25,"nodeType":"433","messageId":"434","endLine":14,"endColumn":39},{"ruleId":"431","severity":1,"message":"468","line":16,"column":9,"nodeType":"433","messageId":"434","endLine":16,"endColumn":12},{"ruleId":"431","severity":1,"message":"456","line":19,"column":11,"nodeType":"433","messageId":"434","endLine":19,"endColumn":27},{"ruleId":"431","severity":1,"message":"458","line":22,"column":11,"nodeType":"433","messageId":"434","endLine":22,"endColumn":19},{"ruleId":"431","severity":1,"message":"554","line":25,"column":11,"nodeType":"433","messageId":"434","endLine":25,"endColumn":18},{"ruleId":"431","severity":1,"message":"546","line":1,"column":17,"nodeType":"433","messageId":"434","endLine":1,"endColumn":25},{"ruleId":"431","severity":1,"message":"464","line":2,"column":17,"nodeType":"433","messageId":"434","endLine":2,"endColumn":23},"no-native-reassign",["555"],"no-negated-in-lhs",["556"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'UserContext' is defined but never used.","'fire' is defined but never used.","'Spinner' is defined but never used.","'Dashboard' is defined but never used.","'HeaderNav' is defined but never used.","'Redirect' is defined but never used.","'functions' is defined but never used.","'Nav' is defined but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'adminRef' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'handleClick' is assigned a value but never used.","'Pagination' is defined but never used.","'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'setPostPerPage' is assigned a value but never used.","'indexOfFirstPost' is assigned a value but never used.","'currentPosts' is assigned a value but never used.","'paginate' is assigned a value but never used.","'pages' is assigned a value but never used.","'setPages' is assigned a value but never used.","'pt' is assigned a value but never used.","'currentPost' is assigned a value but never used.","'useMemo' is defined but never used.","'Button' is defined but never used.","'useForm' is defined but never used.","'institutions' is assigned a value but never used.","'imageUrl' is assigned a value but never used.","'mts' is assigned a value but never used.","'dr' is assigned a value but never used.","no-redeclare","'schoolRef' is already defined.","redeclared","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","ReturnStatement","expectedReturnValue","'selectedGist' is assigned a value but never used.","'setSelectedGist' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Table' is defined but never used.","'OverlayTrigger' is defined but never used.","'Popover' is defined but never used.","'HorizontalBar' is defined but never used.","'Line' is defined but never used.","'Pie' is defined but never used.","'CurrencyFormat' is defined but never used.","'posts' is assigned a value but never used.","'gist' is assigned a value but never used.","'setGist' is assigned a value but never used.","'trendName' is assigned a value but never used.","'setTrendName' is assigned a value but never used.","'setSelectedTrend' is assigned a value but never used.","'sort' is assigned a value but never used.","'setSort' is assigned a value but never used.","'campaign' is assigned a value but never used.","'roll' is assigned a value but never used.","'totalGist' is assigned a value but never used.","'issueRef' is already defined.","'mp' is assigned a value but never used.","'userLength' is assigned a value but never used.","'totalMaterials' is assigned a value but never used.","'totalPages' is assigned a value but never used.","'lists' is assigned a value but never used.","'display' is assigned a value but never used.","'stateChart' is assigned a value but never used.","'stateChartPie' is assigned a value but never used.","'horizontalBar' is assigned a value but never used.","'pageRoute' is assigned a value but never used.","'selectedValue' is assigned a value but never used.","'descendingSort' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","noTargetBlank",{"range":"557","text":"558"},{"range":"559","text":"558"},{"range":"560","text":"558"},"'Modal' is defined but never used.","'Notification' is defined but never used.","'show' is assigned a value but never used.","'setMail' is assigned a value but never used.","'userEmail' is assigned a value but never used.","'setUserEmail' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'sendPush' is assigned a value but never used.","'recipient' is assigned a value but never used.","'Search' is defined but never used.","'search' is assigned a value but never used.","'setSearch' is assigned a value but never used.","'tpost' is assigned a value but never used.","'departmentName' is assigned a value but never used.","'setCurrentPage' is assigned a value but never used.","'searchValue' is assigned a value but never used.","'setSearchValue' is assigned a value but never used.","'acrony' is assigned a value but never used.","'handleDepartmentChange' is assigned a value but never used.","'displayItem' is assigned a value but never used.","'bbs' is assigned a value but never used.","'useEffect' is defined but never used.","'auth' is defined but never used.","'file' is assigned a value but never used.","'setFile' is assigned a value but never used.","'firestore' is defined but never used.","'handleLogin' is assigned a value but never used.","'useState' is defined but never used.","'Overview' is defined but never used.","'Users' is defined but never used.","'GistModal' is defined but never used.","'currentPage' is assigned a value but never used.","'postPerPage' is assigned a value but never used.","'modalShow' is assigned a value but never used.","'gistId' is assigned a value but never used.","'testing' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[7746,7746]," rel=\"noreferrer\"",[10514,10514],[13455,13455]]